{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/utils/db.ts"],"sourcesContent":["import mongoose from \"mongoose\";\nmongoose.set('strictQuery', false);\n\n// Ensure this MONGODB_URL is correct and your IP is whitelisted if using Atlas.\nconst MONGODB_URL= \"mongodb+srv://paudelsunil16:paudelsunil16@cluster0.dlua3bq.mongodb.net/\";\n\nconst connectDB = async () => {\n  if (mongoose.connection.readyState >= 1) {\n    console.log(\"MongoDB is already connected.\");\n    return;\n  }\n  try {\n    if (!MONGODB_URL) {\n      console.error(\"[DB Connect] MongoDB URI is not defined. Please set it in your environment variables or configuration.\");\n      throw new Error(\"Server configuration error: MONGODB_URI is not defined.\");\n    }\n    console.log(\"[DB Connect] Attempting to connect to MongoDB...\");\n    await mongoose.connect(MONGODB_URL);\n    console.log(\"[DB Connect] MongoDB connected successfully.\");\n  } catch (error: any) {\n    console.error(\"[DB Connect] MongoDB connection failed:\", error.message);\n    if (error.stack) {\n      console.error(\"[DB Connect] MongoDB connection error stack:\", error.stack);\n    } else {\n      console.error(\"[DB Connect] MongoDB connection error details:\", error);\n    }\n    // Construct a new error to ensure it's an Error instance with a clear message\n    throw new Error(\"Database connection failed: \" + error.message);\n  }\n};\n\nexport default connectDB;"],"names":[],"mappings":";;;AAAA;;AACA,yGAAA,CAAA,UAAQ,CAAC,GAAG,CAAC,eAAe;AAE5B,gFAAgF;AAChF,MAAM,cAAa;AAEnB,MAAM,YAAY;IAChB,IAAI,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,UAAU,IAAI,GAAG;QACvC,QAAQ,GAAG,CAAC;QACZ;IACF;IACA,IAAI;QACF,uCAAkB;;QAGlB;QACA,QAAQ,GAAG,CAAC;QACZ,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QACvB,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,2CAA2C,MAAM,OAAO;QACtE,IAAI,MAAM,KAAK,EAAE;YACf,QAAQ,KAAK,CAAC,gDAAgD,MAAM,KAAK;QAC3E,OAAO;YACL,QAAQ,KAAK,CAAC,kDAAkD;QAClE;QACA,8EAA8E;QAC9E,MAAM,IAAI,MAAM,iCAAiC,MAAM,OAAO;IAChE;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/models/User.ts"],"sourcesContent":["\nimport mongoose, { Schema, Document } from \"mongoose\";\n\nexport interface IUser extends Document {\n  _id: mongoose.Types.ObjectId; // Explicitly define _id\n  name: string;\n  email: string;\n  passwordHash?: string;\n  role: \"guest\" | \"host\" | \"admin\";\n  stripeAccountId?: string;\n  avatarUrl?: string;\n  createdAt: Date;\n  updatedAt: Date; // Mongoose adds this with timestamps\n}\n\nconst userSchema = new Schema<IUser>(\n  {\n    name: { type: String, required: true },\n    email: { type: String, required: true, unique: true },\n    passwordHash: { type: String },\n    role: { type: String, enum: [\"guest\", \"host\", \"admin\"], default: \"guest\" },\n    stripeAccountId: { type: String },\n    avatarUrl: { type: String },\n  },\n  { \n    timestamps: true,\n    toJSON: {\n      virtuals: true, // ensure virtuals are included\n      transform: function (doc, ret) {\n        ret.id = ret._id.toString(); // map _id to id\n        delete ret._id;\n        delete ret.passwordHash; // remove passwordHash\n        delete ret.__v; // remove __v\n      }\n    },\n    toObject: { // Also apply transform for toObject if needed elsewhere\n      virtuals: true,\n      transform: function (doc, ret) {\n        ret.id = ret._id.toString();\n        delete ret._id;\n        delete ret.passwordHash;\n        delete ret.__v;\n      }\n    }\n  }\n);\n\nexport default mongoose.models.User || mongoose.model<IUser>(\"User\", userSchema);\n"],"names":[],"mappings":";;;AACA;;AAcA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAC3B;IACE,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,cAAc;QAAE,MAAM;IAAO;IAC7B,MAAM;QAAE,MAAM;QAAQ,MAAM;YAAC;YAAS;YAAQ;SAAQ;QAAE,SAAS;IAAQ;IACzE,iBAAiB;QAAE,MAAM;IAAO;IAChC,WAAW;QAAE,MAAM;IAAO;AAC5B,GACA;IACE,YAAY;IACZ,QAAQ;QACN,UAAU;QACV,WAAW,SAAU,GAAG,EAAE,GAAG;YAC3B,IAAI,EAAE,GAAG,IAAI,GAAG,CAAC,QAAQ,IAAI,gBAAgB;YAC7C,OAAO,IAAI,GAAG;YACd,OAAO,IAAI,YAAY,EAAE,sBAAsB;YAC/C,OAAO,IAAI,GAAG,EAAE,aAAa;QAC/B;IACF;IACA,UAAU;QACR,UAAU;QACV,WAAW,SAAU,GAAG,EAAE,GAAG;YAC3B,IAAI,EAAE,GAAG,IAAI,GAAG,CAAC,QAAQ;YACzB,OAAO,IAAI,GAAG;YACd,OAAO,IAAI,YAAY;YACvB,OAAO,IAAI,GAAG;QAChB;IACF;AACF;uCAGa,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAQ,QAAQ","debugId":null}},
    {"offset": {"line": 247, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["\nimport NextAuth, { type NextAuthOptions } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport bcrypt from \"bcryptjs\";\n\nimport connectDB from \"@/utils/db\";         // MongoDB connection utility\nimport User from \"@/models/User\";           // Mongoose User model\n\nexport const authOptions: NextAuthOptions = {\n  // === Authentication Providers ===\n  providers: [\n    CredentialsProvider({\n      id: \"credentials\",\n      name: \"Credentials\",\n\n      // Fields for sign-in formx\n      credentials: {\n        email: { label: \"Email\", type: \"text\", placeholder: \"jsmith@example.com\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n\n      // Core login logic\n      async authorize(credentials) {\n        console.log(\"[Authorize] Credentials received:\", credentials ? { email: credentials.email, password_exists: !!credentials.password } : \"null_credentials\");\n\n        // Validate input\n        if (!credentials?.email || !credentials?.password) {\n          console.log(\"[Authorize] Missing email or password.\");\n          throw new Error(\"Please enter both email and password.\");\n        }\n\n        try {\n          console.log(\"[Authorize] Connecting to DB...\");\n          await connectDB();\n          console.log(\"[Authorize] DB connection successful.\");\n\n          const user = await User.findOne({ email: credentials.email });\n\n          if (!user) {\n            console.log(\"[Authorize] No user found with email:\", credentials.email);\n            throw new Error(\"No user found with this email.\");\n          }\n\n          if (!user.passwordHash) {\n            console.log(\"[Authorize] User has no password set:\", credentials.email);\n            throw new Error(\"User account is not properly configured for password login.\");\n          }\n\n          const isValidPassword = await bcrypt.compare(credentials.password, user.passwordHash);\n          if (!isValidPassword) {\n            console.log(\"[Authorize] Incorrect password for:\", credentials.email);\n            throw new Error(\"Invalid password.\");\n          }\n\n          // Success: Return user data matching the `User` interface in next-auth.d.ts\n          console.log(\"[Authorize] Login success for user:\", user._id.toString(), user.email);\n          return {\n            id: user._id.toString(), // Mongoose _id to string\n            name: user.name,\n            email: user.email,\n            image: user.avatarUrl, // This will map to DefaultAuthUser's `image`\n            role: user.role,\n          };\n        } catch (error: any) {\n          console.error(\"[Authorize] Unexpected error:\", error.message, error.stack);\n\n          // Re-throw specific known errors for NextAuth to handle and potentially display to user\n          if (\n            [\n              \"No user found with this email.\",\n              \"Invalid password.\",\n              \"User account is not properly configured for password login.\",\n              \"Please enter both email and password.\",\n            ].includes(error.message) || error.message.startsWith(\"Database connection failed:\") || error.message.startsWith(\"Server configuration error:\")\n          ) {\n            throw error;\n          }\n          // For other unexpected errors, throw a generic message\n          throw new Error(\"Authentication failed due to an unexpected server issue. Please try again.\");\n        }\n      },\n    }),\n  ],\n\n  // === Session Configuration ===\n  session: {\n    strategy: \"jwt\", // Use JWT tokens instead of DB sessions\n  },\n\n  // === Callback Functions ===\n  callbacks: {\n    // Modify JWT on login or session update\n    async jwt({ token, user, trigger, session: newSessionData }) { // Renamed `session` to `newSessionData` to avoid conflict\n      // On initial sign in, the `user` object from `authorize` is available\n      if (user) {\n        console.log(\"[JWT Callback] Initial user object from authorize:\", user);\n        token.id = user.id;\n        token.name = user.name;\n        token.email = user.email;\n        token.picture = user.image; // `user.image` from authorize maps to `token.picture`\n        token.role = user.role;\n      }\n\n      // Handle session updates (e.g., user updates profile)\n      if (trigger === \"update\" && newSessionData?.user) {\n        console.log(\"[JWT Callback] Updating token from session update data:\", newSessionData.user);\n        token.name = newSessionData.user.name;\n        token.email = newSessionData.user.email;\n        token.picture = newSessionData.user.image;\n        token.role = newSessionData.user.role;\n      }\n      console.log(\"[JWT Callback] Token before returning:\", token);\n      return token;\n    },\n\n    // Attach token data to session for use on client side\n    async session({ session, token }) {\n      console.log(\"[Session Callback] Token received:\", token);\n      if (token) {\n        // Ensure session.user exists and is structured according to `next-auth.d.ts`\n        session.user = {\n          id: token.id as string,\n          name: token.name,\n          email: token.email,\n          image: token.picture, // Map token.picture (from JWT) to session.user.image\n          role: token.role as string | undefined,\n        };\n      }\n      console.log(\"[Session Callback] Session user before returning:\", session.user);\n      return session;\n    },\n  },\n\n  // === Custom Auth Pages ===\n  pages: {\n    signIn: \"/login\",\n    error: \"/login\", // Errors will append ?error= to the URL\n  },\n\n  // === Secret for signing JWT ===\n  secret: process.env.NEXTAUTH_SECRET\n};\n\n// Export for Next.js API routes\nconst handler = NextAuth(authOptions);\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 399, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/models/Property.ts"],"sourcesContent":["\nimport mongoose, { Schema, Document } from 'mongoose';\nimport type { Property as PropertyType, PricePeriod } from '@/lib/types';\n\nexport interface PropertyDocument extends Omit<PropertyType, 'id' | 'hostId' | 'images' | 'createdAt' | 'host' | 'pricePerNight'>, Document {\n  hostId: mongoose.Types.ObjectId;\n  images: string[];\n  price: number; // New field\n  pricePeriod: PricePeriod; // New field\n  host: {\n    name: string;\n    avatarUrl?: string;\n  };\n  createdAt: Date;\n  updatedAt: Date;\n  availableFrom?: Date;\n  availableTo?: Date;\n}\n\nconst propertySchema = new Schema<PropertyDocument>(\n  {\n    hostId: {\n      type: Schema.Types.ObjectId,\n      ref: 'User',\n      required: true,\n    },\n    title: {\n      type: String,\n      required: true,\n      trim: true,\n    },\n    description: {\n      type: String,\n      required: true,\n    },\n    price: { // Changed from pricePerNight\n      type: Number,\n      required: true,\n      min: 0,\n    },\n    pricePeriod: { // Added\n      type: String,\n      enum: ['nightly', 'weekly', 'monthly'] as PricePeriod[],\n      required: true,\n      default: 'nightly',\n    },\n    location: {\n      type: String,\n      required: true,\n      trim: true,\n    },\n    address: {\n      type: String,\n      trim: true,\n    },\n    maxGuests: {\n      type: Number,\n      required: true,\n      min: 1,\n    },\n    images: {\n      type: [String],\n      validate: {\n        validator: function(v: string[]) {\n          return v == null || v.length === 0 || v.every(url => typeof url === 'string' && url.startsWith('http'));\n        },\n        message: 'All image entries must be valid URLs.'\n      },\n      default: [],\n    },\n    bedrooms: {\n      type: Number,\n      required: true,\n      min: 0,\n    },\n    bathrooms: {\n      type: Number,\n      required: true,\n      min: 0,\n    },\n    amenities: {\n      type: [String],\n      default: [],\n    },\n    type: {\n      type: String,\n      enum: ['House', 'Apartment', 'Room', 'Unique Stay'],\n      required: true,\n    },\n    host: {\n      name: { type: String, required: true },\n      avatarUrl: { type: String },\n    },\n    rating: {\n      type: Number,\n      min: 0,\n      max: 5,\n    },\n    reviewsCount: {\n      type: Number,\n      min: 0,\n      default: 0,\n    },\n    availableFrom: {\n      type: Date,\n      required: false,\n    },\n    availableTo: {\n      type: Date,\n      required: false,\n    },\n  },\n  {\n    timestamps: true,\n    toJSON: {\n      virtuals: true,\n      transform: function (doc, ret) {\n        ret.id = ret._id.toString();\n        delete ret._id;\n        delete ret.__v;\n        if (ret.hostId instanceof mongoose.Types.ObjectId) {\n          ret.hostId = ret.hostId.toString();\n        }\n      }\n    },\n    toObject: {\n      virtuals: true,\n      transform: function (doc, ret) {\n        ret.id = ret._id.toString();\n        delete ret._id;\n        delete ret.__v;\n        if (ret.hostId instanceof mongoose.Types.ObjectId) {\n          ret.hostId = ret.hostId.toString();\n        }\n      }\n    }\n  }\n);\n\npropertySchema.index({ location: 'text', title: 'text', description: 'text' });\npropertySchema.index({ hostId: 1 });\npropertySchema.index({ createdAt: -1 });\n\n\nexport default mongoose.models.Property || mongoose.model<PropertyDocument>(\"Property\", propertySchema);\n"],"names":[],"mappings":";;;AACA;;AAkBA,MAAM,iBAAiB,IAAI,yGAAA,CAAA,SAAM,CAC/B;IACE,QAAQ;QACN,MAAM,yGAAA,CAAA,SAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,KAAK;QACL,UAAU;IACZ;IACA,OAAO;QACL,MAAM;QACN,UAAU;QACV,MAAM;IACR;IACA,aAAa;QACX,MAAM;QACN,UAAU;IACZ;IACA,OAAO;QACL,MAAM;QACN,UAAU;QACV,KAAK;IACP;IACA,aAAa;QACX,MAAM;QACN,MAAM;YAAC;YAAW;YAAU;SAAU;QACtC,UAAU;QACV,SAAS;IACX;IACA,UAAU;QACR,MAAM;QACN,UAAU;QACV,MAAM;IACR;IACA,SAAS;QACP,MAAM;QACN,MAAM;IACR;IACA,WAAW;QACT,MAAM;QACN,UAAU;QACV,KAAK;IACP;IACA,QAAQ;QACN,MAAM;YAAC;SAAO;QACd,UAAU;YACR,WAAW,SAAS,CAAW;gBAC7B,OAAO,KAAK,QAAQ,EAAE,MAAM,KAAK,KAAK,EAAE,KAAK,CAAC,CAAA,MAAO,OAAO,QAAQ,YAAY,IAAI,UAAU,CAAC;YACjG;YACA,SAAS;QACX;QACA,SAAS,EAAE;IACb;IACA,UAAU;QACR,MAAM;QACN,UAAU;QACV,KAAK;IACP;IACA,WAAW;QACT,MAAM;QACN,UAAU;QACV,KAAK;IACP;IACA,WAAW;QACT,MAAM;YAAC;SAAO;QACd,SAAS,EAAE;IACb;IACA,MAAM;QACJ,MAAM;QACN,MAAM;YAAC;YAAS;YAAa;YAAQ;SAAc;QACnD,UAAU;IACZ;IACA,MAAM;QACJ,MAAM;YAAE,MAAM;YAAQ,UAAU;QAAK;QACrC,WAAW;YAAE,MAAM;QAAO;IAC5B;IACA,QAAQ;QACN,MAAM;QACN,KAAK;QACL,KAAK;IACP;IACA,cAAc;QACZ,MAAM;QACN,KAAK;QACL,SAAS;IACX;IACA,eAAe;QACb,MAAM;QACN,UAAU;IACZ;IACA,aAAa;QACX,MAAM;QACN,UAAU;IACZ;AACF,GACA;IACE,YAAY;IACZ,QAAQ;QACN,UAAU;QACV,WAAW,SAAU,GAAG,EAAE,GAAG;YAC3B,IAAI,EAAE,GAAG,IAAI,GAAG,CAAC,QAAQ;YACzB,OAAO,IAAI,GAAG;YACd,OAAO,IAAI,GAAG;YACd,IAAI,IAAI,MAAM,YAAY,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE;gBACjD,IAAI,MAAM,GAAG,IAAI,MAAM,CAAC,QAAQ;YAClC;QACF;IACF;IACA,UAAU;QACR,UAAU;QACV,WAAW,SAAU,GAAG,EAAE,GAAG;YAC3B,IAAI,EAAE,GAAG,IAAI,GAAG,CAAC,QAAQ;YACzB,OAAO,IAAI,GAAG;YACd,OAAO,IAAI,GAAG;YACd,IAAI,IAAI,MAAM,YAAY,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE;gBACjD,IAAI,MAAM,GAAG,IAAI,MAAM,CAAC,QAAQ;YAClC;QACF;IACF;AACF;AAGF,eAAe,KAAK,CAAC;IAAE,UAAU;IAAQ,OAAO;IAAQ,aAAa;AAAO;AAC5E,eAAe,KAAK,CAAC;IAAE,QAAQ;AAAE;AACjC,eAAe,KAAK,CAAC;IAAE,WAAW,CAAC;AAAE;uCAGtB,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,QAAQ,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAmB,YAAY","debugId":null}},
    {"offset": {"line": 556, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/properties/%5Bid%5D/route.ts"],"sourcesContent":["\nimport { NextResponse, type NextRequest } from 'next/server';\nimport { getServerSession } from 'next-auth/next';\nimport mongoose from 'mongoose';\nimport { authOptions } from '@/app/api/auth/[...nextauth]/route';\nimport connectDB from '@/utils/db';\nimport PropertyModel from '@/models/Property';\nimport type { Property as PropertyType, PricePeriod } from '@/lib/types';\nimport * as z from 'zod';\nimport { startOfDay, isValid as isValidDate } from 'date-fns';\n\nconst propertyUpdateSchema = z.object({\n  title: z.string().min(5).max(100).optional(),\n  description: z.string().min(20).max(5000).optional(),\n  type: z.enum([\"House\", \"Apartment\", \"Room\", \"Unique Stay\"]).optional(),\n  location: z.string().min(3).max(100).optional(),\n  address: z.string().min(5).max(200).optional(),\n  price: z.coerce.number().positive().min(1).max(100000).optional(),\n  pricePeriod: z.enum([\"nightly\", \"weekly\", \"monthly\"] as [PricePeriod, ...PricePeriod[]]).optional(),\n  bedrooms: z.coerce.number().min(0).max(20).optional(),\n  bathrooms: z.coerce.number().min(0).max(10).optional(), \n  maxGuests: z.coerce.number().min(1).max(50).optional(),\n  images: z.array(z.object({ url: z.string().url() })).min(1,\"At least one image is required.\").max(5,\"Maximum 5 images allowed.\").optional(),\n  amenities: z.array(z.string()).optional(),\n  availableFrom: z.coerce.date().nullable().optional(),\n  availableTo: z.coerce.date().nullable().optional(),\n}).refine(data => {\n  if (data.availableFrom && data.availableTo) {\n    if (!isValidDate(data.availableFrom) || !isValidDate(data.availableTo)) return false;\n    return data.availableTo >= data.availableFrom;\n  }\n  return true;\n}, {\n  message: \"Availability end date cannot be before start date, or dates are invalid.\",\n  path: [\"availableTo\"],\n});\n\n\nexport async function GET(request: NextRequest, { params }: { params: { id: string } }) {\n  const { id } = params;\n\n  if (!mongoose.Types.ObjectId.isValid(id)) {\n    return NextResponse.json({ message: 'Invalid property ID format.' }, { status: 400 });\n  }\n\n  try {\n    await connectDB();\n    const propertyDoc = await PropertyModel.findById(id).lean(); \n\n    if (!propertyDoc) {\n      return NextResponse.json({ message: 'Property not found.' }, { status: 404 });\n    }\n    \n    const propertyResponse: PropertyType = {\n        id: propertyDoc._id.toString(),\n        hostId: propertyDoc.hostId.toString(),\n        title: propertyDoc.title,\n        description: propertyDoc.description,\n        location: propertyDoc.location,\n        address: propertyDoc.address,\n        price: propertyDoc.price,\n        pricePeriod: propertyDoc.pricePeriod,\n        images: propertyDoc.images,\n        bedrooms: propertyDoc.bedrooms,\n        bathrooms: propertyDoc.bathrooms,\n        maxGuests: propertyDoc.maxGuests,\n        amenities: propertyDoc.amenities,\n        type: propertyDoc.type,\n        host: { \n          name: propertyDoc.host.name,\n          avatarUrl: propertyDoc.host.avatarUrl,\n        },\n        rating: propertyDoc.rating,\n        reviewsCount: propertyDoc.reviewsCount,\n        createdAt: propertyDoc.createdAt,\n        availableFrom: propertyDoc.availableFrom,\n        availableTo: propertyDoc.availableTo,\n    };\n\n    return NextResponse.json(propertyResponse, { status: 200 });\n\n  } catch (error: any) {\n    console.error(`[API /properties/${id} GET] Error fetching property:`, error);\n    return NextResponse.json({ message: 'Server error while fetching property.', errorDetails: error.message }, { status: 500 });\n  }\n}\n\n\nexport async function PATCH(request: NextRequest, { params }: { params: { id: string } }) {\n  const { id } = params;\n  const session = await getServerSession(authOptions);\n\n  if (!session || !session.user || !session.user.id) {\n    return NextResponse.json({ message: 'Unauthorized: You must be logged in to update a property.' }, { status: 401 });\n  }\n\n  if (!mongoose.Types.ObjectId.isValid(id)) {\n    return NextResponse.json({ message: 'Invalid property ID format.' }, { status: 400 });\n  }\n\n  try {\n    await connectDB();\n    const propertyToUpdate = await PropertyModel.findById(id);\n\n    if (!propertyToUpdate) {\n      return NextResponse.json({ message: 'Property not found.' }, { status: 404 });\n    }\n\n    const isOwner = propertyToUpdate.hostId.toString() === session.user.id;\n    const isAdmin = session.user.role === 'admin';\n\n    if (!isOwner && !isAdmin) {\n      return NextResponse.json({ message: 'Forbidden: You are not authorized to update this property.' }, { status: 403 });\n    }\n\n    const body = await request.json();\n    const parsedBody = propertyUpdateSchema.safeParse(body);\n\n    if (!parsedBody.success) {\n      return NextResponse.json({ message: 'Invalid property data provided.', errors: parsedBody.error.format() }, { status: 400 });\n    }\n    \n    const updateOperation: { $set: any, $unset?: any } = { $set: {} };\n    if (Object.keys(parsedBody.data).length === 0) {\n        return NextResponse.json({ message: 'No fields provided for update.' }, { status: 400 });\n    }\n\n    const { images, availableFrom, availableTo, ...restOfData } = parsedBody.data;\n\n    for (const key in restOfData) {\n      if (restOfData[key as keyof typeof restOfData] !== undefined) {\n        updateOperation.$set[key] = restOfData[key as keyof typeof restOfData];\n      }\n    }\n    \n    if (images !== undefined) {\n        updateOperation.$set.images = images.map(img => img.url);\n    }\n\n    if (availableFrom !== undefined) { // Can be a Date object or null\n      updateOperation.$set.availableFrom = availableFrom ? startOfDay(availableFrom) : null;\n    }\n    if (availableTo !== undefined) { // Can be a Date object or null\n      updateOperation.$set.availableTo = availableTo ? startOfDay(availableTo) : null;\n    }\n    \n    if (Object.keys(updateOperation.$set).length === 0) {\n        return NextResponse.json({ message: 'No valid fields provided for update (after processing).'}, { status: 400 });\n    }\n\n    const updatedProperty = await PropertyModel.findByIdAndUpdate(id, updateOperation, { new: true, runValidators: true });\n\n    if (!updatedProperty) {\n        return NextResponse.json({ message: 'Property found but update failed unexpectedly.' }, { status: 500 });\n    }\n\n    return NextResponse.json({ message: 'Property updated successfully!', property: updatedProperty.toObject() }, { status: 200 });\n\n  } catch (error: any) {\n    console.error(`[API /properties/${id} PATCH] Error updating property:`, error);\n     let errorMessage = 'An unexpected error occurred while updating the property.';\n    if (error.name === 'MongoNetworkError') {\n        errorMessage = 'Database connection error. Please try again later.';\n    } else if (error.code === 11000) { // Duplicate key error\n        errorMessage = 'A property with some of these unique details might already exist.';\n    } else if (error.message) {\n        errorMessage = error.message;\n    }\n    return NextResponse.json({ message: errorMessage, errorDetails: error.toString() }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}