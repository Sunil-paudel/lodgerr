{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/dbConnect.ts"],"sourcesContent":["\nimport mongoose from \"mongoose\";\n\n// Ensure MONGO environment variable is checked\nif (!process.env.MONGO) {\n  throw new Error(\n    'Please define the MONGO environment variable inside .env.local'\n  );\n}\n\nmongoose.set('strictQuery', false);\n\nconst connect = async () => {\n  // Check if we're already connected or connecting\n  if (mongoose.connection.readyState === 1) {\n    console.log(\"Already connected to MongoDB.\");\n    return;\n  }\n  if (mongoose.connection.readyState === 2) {\n    console.log(\"Connecting to MongoDB...\");\n    // If connecting, wait for the existing connection attempt to resolve\n    // This might involve a more complex promise cache in a real app,\n    // but for this simpler version, we'll just log and let it proceed.\n    // Or, you could implement a promise to wait on.\n    // For now, to avoid multiple unhandled connection attempts,\n    // we will rely on subsequent calls to simply re-attempt if the first one failed.\n  }\n\n  try {\n    console.log(\"Attempting to connect to MongoDB...\");\n    await mongoose.connect(process.env.MONGO!); // Added non-null assertion as we check MONGO above\n    console.log(\"Successfully connected to MongoDB.\");\n  } catch (error) {\n    console.error(\"Connection to MongoDB failed!\", error);\n    // It's often better to let the application decide how to handle this,\n    // rather than throwing an error that might crash a serverless function\n    // on startup if the DB isn't immediately available.\n    // For now, we re-throw as per the original request.\n    throw new Error(\"Connection failed!\");\n  }\n};\n\nexport default connect;\n"],"names":[],"mappings":";;;AACA;;AAEA,+CAA+C;AAC/C,IAAI,CAAC,QAAQ,GAAG,CAAC,KAAK,EAAE;IACtB,MAAM,IAAI,MACR;AAEJ;AAEA,yGAAA,CAAA,UAAQ,CAAC,GAAG,CAAC,eAAe;AAE5B,MAAM,UAAU;IACd,iDAAiD;IACjD,IAAI,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,UAAU,KAAK,GAAG;QACxC,QAAQ,GAAG,CAAC;QACZ;IACF;IACA,IAAI,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,UAAU,KAAK,GAAG;QACxC,QAAQ,GAAG,CAAC;IACZ,qEAAqE;IACrE,iEAAiE;IACjE,mEAAmE;IACnE,gDAAgD;IAChD,4DAA4D;IAC5D,iFAAiF;IACnF;IAEA,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,KAAK,GAAI,mDAAmD;QAC/F,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,sEAAsE;QACtE,uEAAuE;QACvE,oDAAoD;QACpD,oDAAoD;QACpD,MAAM,IAAI,MAAM;IAClB;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/models/User.ts"],"sourcesContent":["import mongoose, { Schema, Document } from 'mongoose';\nimport type { User as UserType, UserRole } from '@/lib/types';\n\nexport interface UserDocument extends Omit<UserType, 'id' | 'createdAt'>, Document {}\n\nconst userSchema = new Schema<UserDocument>(\n  {\n    name: {\n      type: String,\n      required: true,\n    },\n    email: {\n      type: String,\n      unique: true,\n      required: true,\n      trim: true,\n      lowercase: true,\n    },\n    passwordHash: {\n      type: String,\n      // required: true, // Make this required if users must always have a password\n    },\n    role: {\n      type: String,\n      enum: ['guest', 'host', 'admin'] as UserRole[],\n      required: true,\n      default: 'guest',\n    },\n    stripeAccountId: {\n      type: String,\n    },\n    avatarUrl: {\n      type: String,\n    },\n  },\n  { timestamps: true } // Automatically adds createdAt and updatedAt\n);\n\nexport default mongoose.models.User || mongoose.model<UserDocument>(\"User\", userSchema);\n"],"names":[],"mappings":";;;AAAA;;AAKA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAC3B;IACE,MAAM;QACJ,MAAM;QACN,UAAU;IACZ;IACA,OAAO;QACL,MAAM;QACN,QAAQ;QACR,UAAU;QACV,MAAM;QACN,WAAW;IACb;IACA,cAAc;QACZ,MAAM;IAER;IACA,MAAM;QACJ,MAAM;QACN,MAAM;YAAC;YAAS;YAAQ;SAAQ;QAChC,UAAU;QACV,SAAS;IACX;IACA,iBAAiB;QACf,MAAM;IACR;IACA,WAAW;QACT,MAAM;IACR;AACF,GACA;IAAE,YAAY;AAAK,EAAE,6CAA6C;;uCAGrD,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAe,QAAQ","debugId":null}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/auth/signup/route.ts"],"sourcesContent":["\nimport { NextResponse, type NextRequest } from 'next/server';\nimport dbConnect from '@/lib/dbConnect';\nimport User from '@/models/User';\n// IMPORTANT: Password hashing (e.g., with bcryptjs) should be added here for security.\n\nexport async function POST(request: NextRequest) {\n  try {\n    await dbConnect();\n    console.log(\"Database connected successfully for signup.\");\n\n    const { fullName, email, password } = await request.json();\n    console.log(\"Signup request received for:\", { fullName, email });\n\n    if (!fullName || !email || !password) {\n      console.log(\"Missing required fields\");\n      return NextResponse.json({ message: 'Missing required fields: fullName, email, and password.' }, { status: 400 });\n    }\n\n    // Check if user already exists\n    console.log(`Checking if user exists with email: ${email}`);\n    const existingUser = await User.findOne({ email });\n    if (existingUser) {\n      console.log(`User with email ${email} already exists.`);\n      return NextResponse.json({ message: 'User with this email already exists.' }, { status: 409 }); // 409 Conflict\n    }\n    console.log(`User with email ${email} does not exist. Proceeding to create.`);\n\n    // TODO: Hash the password securely before saving\n    // For now, storing password directly as passwordHash for demonstration.\n    // This is NOT secure for production.\n    const newUser = new User({\n      name: fullName,\n      email,\n      passwordHash: password, // Replace with hashed password\n      role: 'guest', // Default role\n    });\n\n    console.log(\"Attempting to save new user:\", newUser.email);\n    await newUser.save();\n    console.log(\"User saved successfully:\", newUser.email, \"ID:\", newUser._id);\n\n    return NextResponse.json({ message: 'User created successfully!', userId: newUser._id }, { status: 201 });\n  } catch (error) {\n    console.error('Signup API error:', error); // Log the full error object\n    let errorMessage = 'An unexpected error occurred during signup.';\n    let errorDetails = 'No additional details.';\n    if (error instanceof Error) {\n        errorMessage = error.message;\n        errorDetails = error.stack || 'No stack trace available.';\n    } else if (typeof error === 'object' && error !== null) {\n        errorMessage = JSON.stringify(error);\n    } else {\n        errorMessage = String(error);\n    }\n    return NextResponse.json({ \n        message: 'Server error during signup.', \n        error: errorMessage,\n        details: errorDetails // Optionally send stack in dev, remove for prod\n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AACA;AACA;AACA;;;;AAGO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,CAAA,GAAA,yHAAA,CAAA,UAAS,AAAD;QACd,QAAQ,GAAG,CAAC;QAEZ,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QACxD,QAAQ,GAAG,CAAC,gCAAgC;YAAE;YAAU;QAAM;QAE9D,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU;YACpC,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAA0D,GAAG;gBAAE,QAAQ;YAAI;QACjH;QAEA,+BAA+B;QAC/B,QAAQ,GAAG,CAAC,CAAC,oCAAoC,EAAE,OAAO;QAC1D,MAAM,eAAe,MAAM,uHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAE;QAAM;QAChD,IAAI,cAAc;YAChB,QAAQ,GAAG,CAAC,CAAC,gBAAgB,EAAE,MAAM,gBAAgB,CAAC;YACtD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAuC,GAAG;gBAAE,QAAQ;YAAI,IAAI,eAAe;QACjH;QACA,QAAQ,GAAG,CAAC,CAAC,gBAAgB,EAAE,MAAM,sCAAsC,CAAC;QAE5E,iDAAiD;QACjD,wEAAwE;QACxE,qCAAqC;QACrC,MAAM,UAAU,IAAI,uHAAA,CAAA,UAAI,CAAC;YACvB,MAAM;YACN;YACA,cAAc;YACd,MAAM;QACR;QAEA,QAAQ,GAAG,CAAC,gCAAgC,QAAQ,KAAK;QACzD,MAAM,QAAQ,IAAI;QAClB,QAAQ,GAAG,CAAC,4BAA4B,QAAQ,KAAK,EAAE,OAAO,QAAQ,GAAG;QAEzE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAA8B,QAAQ,QAAQ,GAAG;QAAC,GAAG;YAAE,QAAQ;QAAI;IACzG,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB,QAAQ,4BAA4B;QACvE,IAAI,eAAe;QACnB,IAAI,eAAe;QACnB,IAAI,iBAAiB,OAAO;YACxB,eAAe,MAAM,OAAO;YAC5B,eAAe,MAAM,KAAK,IAAI;QAClC,OAAO,IAAI,OAAO,UAAU,YAAY,UAAU,MAAM;YACpD,eAAe,KAAK,SAAS,CAAC;QAClC,OAAO;YACH,eAAe,OAAO;QAC1B;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,SAAS;YACT,OAAO;YACP,SAAS,aAAa,gDAAgD;QAC1E,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}