{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/models/User.ts"],"sourcesContent":["import mongoose, { Schema, Document, models, model } from \"mongoose\";\n\n\nexport interface IUser extends Document {\n \n  name: string;\n  email: string;\n  passwordHash?: string;\n  role: \"guest\" | \"host\" | \"admin\";\n  stripeAccountId?: string;\n  avatarUrl?: string;\n  createdAt: Date;\n}\n\nconst userSchema = new Schema<IUser>(\n  {\n    id: { type: Number, unique: true }, \n    name: { type: String, required: true, unique: true },\n    email: { type: String, required: true, unique: true },\n    passwordHash: { type: String },\n    role: { type: String, enum: [\"guest\", \"host\", \"admin\"], default: \"guest\" },\n    stripeAccountId: { type: String },\n    avatarUrl: { type: String },\n  },\n  { timestamps: true }\n);\n\n\n\nexport default models.User || model<IUser>(\"User\", userSchema);\n"],"names":[],"mappings":";;;AAAA;;AAcA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAC3B;IACE,IAAI;QAAE,MAAM;QAAQ,QAAQ;IAAK;IACjC,MAAM;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACnD,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,cAAc;QAAE,MAAM;IAAO;IAC7B,MAAM;QAAE,MAAM;QAAQ,MAAM;YAAC;YAAS;YAAQ;SAAQ;QAAE,SAAS;IAAQ;IACzE,iBAAiB;QAAE,MAAM;IAAO;IAChC,WAAW;QAAE,MAAM;IAAO;AAC5B,GACA;IAAE,YAAY;AAAK;uCAKN,yGAAA,CAAA,SAAM,CAAC,IAAI,IAAI,CAAA,GAAA,yGAAA,CAAA,QAAK,AAAD,EAAS,QAAQ","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/utils/db.ts"],"sourcesContent":["import mongoose from \"mongoose\";\nmongoose.set('strictQuery', false);\nconst MONGODB_URL= \"mongodb+srv://paudelsunil16:paudelsunil16@cluster0.dlua3bq.mongodb.net/\";\nconst connect = async () => {\n  try {\n    await mongoose.connect(MONGODB_URL);\n  } catch (error) {\n    throw new Error(\"Connection failed!\");\n  }\n};\n\nexport default connect;"],"names":[],"mappings":";;;AAAA;;AACA,yGAAA,CAAA,UAAQ,CAAC,GAAG,CAAC,eAAe;AAC5B,MAAM,cAAa;AACnB,MAAM,UAAU;IACd,IAAI;QACF,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;IACzB,EAAE,OAAO,OAAO;QACd,MAAM,IAAI,MAAM;IAClB;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 257, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/auth/signup/route.ts"],"sourcesContent":["\nimport User from \"@/models/User\";\nimport connectDB from \"@/utils/db\"; // Changed from connect to connectDB\nimport bcrypt from \"bcryptjs\";\nimport { NextResponse, type NextRequest } from \"next/server\";\nimport nodemailer from \"nodemailer\";\n\nexport const POST = async (request: NextRequest) => {\n  try {\n    const { fullName, email, password } = await request.json();\n\n    if (!fullName || !email || !password) {\n      return NextResponse.json(\n        { message: \"Missing required fields: fullName, email, and password.\" },\n        { status: 400 }\n      );\n    }\n    console.log(\"Signup API: Attempting DB connection for signup.\");\n    await connectDB(); // Changed from connect() to connectDB()\n    console.log(\"Signup API: DB connection successful (or already connected).\");\n\n\n    const existingUser = await User.findOne({ email });\n    if (existingUser) {\n      console.log(\"Signup API: User already exists with email:\", email);\n      return NextResponse.json(\n        { message: \"User with this email already exists\" },\n        { status: 409 } \n      );\n    }\n\n    const hashedPassword = await bcrypt.hash(password, 5);\n    console.log(\"Generated hashedPassword:\", hashedPassword); \n\n    const newUser = new User({\n      name: fullName,\n      email,\n      passwordHash: hashedPassword, \n    });\n\n    console.log(\"New user object before save:\", JSON.stringify(newUser.toObject(), null, 2)); \n\n    await newUser.save();\n    console.log(\"User saved successfully.\"); \n\n    // Sending confirmation email\n    try {\n      const transporter = nodemailer.createTransport({\n        service: \"gmail\",\n        auth: {\n          user: process.env.GOOGLE_EMAIL,\n          pass: process.env.GOOGLE_PASSWORD,\n        },\n      });\n\n      const mailOptions = {\n        from: process.env.GOOGLE_EMAIL,\n        to: email,\n        subject: \"Registration Confirmation - Lodger\",\n        text: `Thank you for registering on Lodger, ${fullName}! Your registration is successful. If you did not apply for registration, please contact us.`,\n      };\n\n      await transporter.sendMail(mailOptions);\n      console.log(\"Confirmation email sent to:\", email);\n    } catch (emailError: any) {\n      console.error(\"Failed to send confirmation email:\", emailError.message || emailError);\n    }\n\n    return NextResponse.json(\n      { message: \"User created successfully. Confirmation email sent.\" },\n      { status: 201 }\n    );\n\n  } catch (err: any) {\n    console.error(\"Signup API Error:\", err); \n    \n    let errorMessage = \"An unexpected error occurred during signup.\";\n    let errorDetails = \"\"; // For more detailed logging on the server\n\n    if (err.message) {\n        errorMessage = err.message;\n    }\n    \n    // Capture stack or full error object for server logs\n    if (err.stack) {\n        errorDetails = err.stack;\n    } else if (typeof err === 'object' && err !== null) {\n        errorDetails = JSON.stringify(err);\n    }\n    \n    // Specific message if it's a DB connection error from our connectDB function\n    if (errorMessage.startsWith(\"Database connection failed:\") || errorMessage === \"Server configuration error: MONGODB_URI is not defined.\") {\n         console.error(\"Signup API - Database Connection Error Details:\", errorDetails || errorMessage);\n         return NextResponse.json(\n            { message: \"Server error: Could not connect to the database. Please try again later.\", error: errorMessage }, // Keep client message generic\n            { status: 500 }\n        );\n    }\n\n    // Generic server error for other issues\n    console.error(\"Signup API - Other Error Details:\", errorDetails || errorMessage);\n    return NextResponse.json(\n        { message: \"Server error during signup. Please try again later.\", error: errorMessage }, // Keep client message generic\n        { status: 500 }\n    );\n  }\n};\n"],"names":[],"mappings":";;;AACA;AACA,0MAAoC,oCAAoC;AACxE;AACA;AACA;;;;;;AAEO,MAAM,OAAO,OAAO;IACzB,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAExD,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU;YACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAA0D,GACrE;gBAAE,QAAQ;YAAI;QAElB;QACA,QAAQ,GAAG,CAAC;QACZ,MAAM,CAAA,GAAA,oHAAA,CAAA,UAAS,AAAD,KAAK,wCAAwC;QAC3D,QAAQ,GAAG,CAAC;QAGZ,MAAM,eAAe,MAAM,uHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAE;QAAM;QAChD,IAAI,cAAc;YAChB,QAAQ,GAAG,CAAC,+CAA+C;YAC3D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAsC,GACjD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QACnD,QAAQ,GAAG,CAAC,6BAA6B;QAEzC,MAAM,UAAU,IAAI,uHAAA,CAAA,UAAI,CAAC;YACvB,MAAM;YACN;YACA,cAAc;QAChB;QAEA,QAAQ,GAAG,CAAC,gCAAgC,KAAK,SAAS,CAAC,QAAQ,QAAQ,IAAI,MAAM;QAErF,MAAM,QAAQ,IAAI;QAClB,QAAQ,GAAG,CAAC;QAEZ,6BAA6B;QAC7B,IAAI;YACF,MAAM,cAAc,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;gBAC7C,SAAS;gBACT,MAAM;oBACJ,MAAM,QAAQ,GAAG,CAAC,YAAY;oBAC9B,MAAM,QAAQ,GAAG,CAAC,eAAe;gBACnC;YACF;YAEA,MAAM,cAAc;gBAClB,MAAM,QAAQ,GAAG,CAAC,YAAY;gBAC9B,IAAI;gBACJ,SAAS;gBACT,MAAM,CAAC,qCAAqC,EAAE,SAAS,4FAA4F,CAAC;YACtJ;YAEA,MAAM,YAAY,QAAQ,CAAC;YAC3B,QAAQ,GAAG,CAAC,+BAA+B;QAC7C,EAAE,OAAO,YAAiB;YACxB,QAAQ,KAAK,CAAC,sCAAsC,WAAW,OAAO,IAAI;QAC5E;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAsD,GACjE;YAAE,QAAQ;QAAI;IAGlB,EAAE,OAAO,KAAU;QACjB,QAAQ,KAAK,CAAC,qBAAqB;QAEnC,IAAI,eAAe;QACnB,IAAI,eAAe,IAAI,0CAA0C;QAEjE,IAAI,IAAI,OAAO,EAAE;YACb,eAAe,IAAI,OAAO;QAC9B;QAEA,qDAAqD;QACrD,IAAI,IAAI,KAAK,EAAE;YACX,eAAe,IAAI,KAAK;QAC5B,OAAO,IAAI,OAAO,QAAQ,YAAY,QAAQ,MAAM;YAChD,eAAe,KAAK,SAAS,CAAC;QAClC;QAEA,6EAA6E;QAC7E,IAAI,aAAa,UAAU,CAAC,kCAAkC,iBAAiB,2DAA2D;YACrI,QAAQ,KAAK,CAAC,mDAAmD,gBAAgB;YACjF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACrB;gBAAE,SAAS;gBAA4E,OAAO;YAAa,GAC3G;gBAAE,QAAQ;YAAI;QAEtB;QAEA,wCAAwC;QACxC,QAAQ,KAAK,CAAC,qCAAqC,gBAAgB;QACnE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,SAAS;YAAuD,OAAO;QAAa,GACtF;YAAE,QAAQ;QAAI;IAEpB;AACF","debugId":null}}]
}