{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/models/User.ts"],"sourcesContent":["import mongoose, { Schema, Document, models, model } from \"mongoose\";\n\n\nexport interface IUser extends Document {\n \n  name: string;\n  email: string;\n  passwordHash?: string;\n  role: \"guest\" | \"host\" | \"admin\";\n  stripeAccountId?: string;\n  avatarUrl?: string;\n  createdAt: Date;\n}\n\nconst userSchema = new Schema<IUser>(\n  {\n    id: { type: Number, unique: true }, \n    name: { type: String, required: true, unique: true },\n    email: { type: String, required: true, unique: true },\n    passwordHash: { type: String },\n    role: { type: String, enum: [\"guest\", \"host\", \"admin\"], default: \"guest\" },\n    stripeAccountId: { type: String },\n    avatarUrl: { type: String },\n  },\n  { timestamps: true }\n);\n\n\n\nexport default models.User || model<IUser>(\"User\", userSchema);\n"],"names":[],"mappings":";;;AAAA;;AAcA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAC3B;IACE,IAAI;QAAE,MAAM;QAAQ,QAAQ;IAAK;IACjC,MAAM;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACnD,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,cAAc;QAAE,MAAM;IAAO;IAC7B,MAAM;QAAE,MAAM;QAAQ,MAAM;YAAC;YAAS;YAAQ;SAAQ;QAAE,SAAS;IAAQ;IACzE,iBAAiB;QAAE,MAAM;IAAO;IAChC,WAAW;QAAE,MAAM;IAAO;AAC5B,GACA;IAAE,YAAY;AAAK;uCAKN,yGAAA,CAAA,SAAM,CAAC,IAAI,IAAI,CAAA,GAAA,yGAAA,CAAA,QAAK,AAAD,EAAS,QAAQ","debugId":null}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/utils/db.ts"],"sourcesContent":["import mongoose from \"mongoose\";\nmongoose.set('strictQuery', false);\nconst MONGODB_URL= \"mongodb+srv://paudelsunil16:paudelsunil16@cluster0.dlua3bq.mongodb.net/\";\nconst connect = async () => {\n  try {\n    await mongoose.connect(MONGODB_URL);\n  } catch (error) {\n    throw new Error(\"Connection failed!\");\n  }\n};\n\nexport default connect;"],"names":[],"mappings":";;;AAAA;;AACA,yGAAA,CAAA,UAAQ,CAAC,GAAG,CAAC,eAAe;AAC5B,MAAM,cAAa;AACnB,MAAM,UAAU;IACd,IAAI;QACF,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;IACzB,EAAE,OAAO,OAAO;QACd,MAAM,IAAI,MAAM;IAClB;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 217, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["\nimport NextAuth, { type NextAuthOptions } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport User from \"@/models/User\"; \nimport connectDB from \"@/utils/db\"; \nimport bcrypt from \"bcryptjs\";\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n    CredentialsProvider({\n      name: \"Credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"text\", placeholder: \"jsmith@example.com\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          console.log(\"NextAuth: Missing email or password in credentials\");\n          throw new Error(\"Please enter both email and password.\");\n        }\n        console.log(\"NextAuth Authorize: Attempting to connect to DB for user:\", credentials.email);\n        try {\n          await connectDB();\n          console.log(\"NextAuth Authorize: DB connection successful (or already connected).\");\n\n          const user = await User.findOne({ email: credentials.email });\n\n          if (!user) {\n            console.log(\"NextAuth Authorize: No user found with email:\", credentials.email);\n            throw new Error(\"No user found with this email.\");\n          }\n\n          if (!user.passwordHash) {\n            console.log(\"NextAuth Authorize: User account not configured for password login (no passwordHash):\", credentials.email);\n            throw new Error(\"User account is not properly configured for password login.\");\n          }\n\n          const isPasswordCorrect = await bcrypt.compare(\n            credentials.password,\n            user.passwordHash\n          );\n\n          if (!isPasswordCorrect) {\n            console.log(\"NextAuth Authorize: Incorrect password for email:\", credentials.email);\n            throw new Error(\"Invalid password.\");\n          }\n\n          console.log(\"NextAuth Authorize: User authenticated successfully:\", credentials.email);\n          return {\n            id: user._id.toString(),\n            name: user.name,\n            email: user.email,\n            image: user.avatarUrl, \n            role: user.role, // Include role from the user document\n          };\n        } catch (error: any) {\n          console.error(\"Critical error in NextAuth authorize callback:\", error.message);\n          console.error(\"Full error details:\", error); \n          if (error.message === \"Connection failed!\") {\n             throw new Error(\"Database connection error. Please try again later.\");\n          }\n          throw new Error(error.message || \"Authentication failed due to a server error.\");\n        }\n      },\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n  },\n  callbacks: {\n    async jwt({ token, user, trigger, session }) {\n      if (trigger === \"update\" && session?.user) {\n        token.name = session.user.name;\n        token.email = session.user.email;\n        token.picture = session.user.image; \n        token.role = session.user.role; // Ensure role is updated in token if session is updated\n      }\n      if (user) {\n        token.id = user.id;\n        token.name = user.name;\n        token.email = user.email;\n        token.picture = user.image; \n        token.role = user.role; // Add role to token\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token && session.user) { // Ensure session.user exists\n        session.user.id = token.id as string;\n        session.user.name = token.name as string | null | undefined;\n        session.user.email = token.email as string | null | undefined;\n        session.user.image = token.picture as string | null | undefined; \n        session.user.role = token.role as string | null | undefined; // Add role to session user\n      }\n      return session;\n    },\n  },\n  pages: {\n    error: \"/login\", \n    signIn: '/login', \n  },\n  secret: process.env.NEXTAUTH_SECRET,\n};\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 336, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/user/profile/route.ts"],"sourcesContent":["\nimport { NextResponse, type NextRequest } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\"; // Adjust path as necessary\nimport connectDB from \"@/utils/db\";\nimport User from \"@/models/User\"; // Assuming IUser is the default export\nimport * as z from \"zod\";\n\nconst profileUpdateSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters.\").max(50, \"Name cannot exceed 50 characters.\").optional(),\n  email: z.string().email(\"Invalid email address.\").optional(),\n  avatarUrl: z.string().url(\"Invalid URL for avatar.\").or(z.literal(\"\")).optional(), // Allow empty string to clear avatar\n});\n\nexport async function PATCH(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n\n    if (!session || !session.user || !session.user.id) {\n      return NextResponse.json({ message: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const userId = session.user.id;\n    const body = await request.json();\n\n    const parsedBody = profileUpdateSchema.safeParse(body);\n\n    if (!parsedBody.success) {\n      return NextResponse.json({ message: \"Invalid input.\", errors: parsedBody.error.format() }, { status: 400 });\n    }\n\n    const { name, email, avatarUrl } = parsedBody.data;\n\n    // Construct update object with only provided fields\n    const updateData: { name?: string; email?: string; avatarUrl?: string } = {};\n    if (name !== undefined) updateData.name = name;\n    if (email !== undefined) updateData.email = email;\n    if (avatarUrl !== undefined) updateData.avatarUrl = avatarUrl;\n    \n    if (Object.keys(updateData).length === 0) {\n        return NextResponse.json({ message: \"No fields to update.\" }, { status: 400 });\n    }\n\n    await connectDB();\n\n    // If email is being changed, check if it's already taken by another user\n    if (email && email !== session.user.email) {\n        const existingUserWithEmail = await User.findOne({ email: email, _id: { $ne: userId } });\n        if (existingUserWithEmail) {\n            return NextResponse.json({ message: \"Email already in use by another account.\" }, { status: 409 });\n        }\n    }\n    \n    const updatedUser = await User.findByIdAndUpdate(\n      userId,\n      { $set: updateData },\n      { new: true, runValidators: true, lean: true  } // lean to get plain JS object\n    ).select('-passwordHash'); // Exclude passwordHash from the returned document\n\n    if (!updatedUser) {\n      return NextResponse.json({ message: \"User not found or update failed.\" }, { status: 404 });\n    }\n    \n    // The 'updatedUser' here is from the database.\n    // The session update will happen client-side using `updateSession` from `useSession`\n    // by passing the relevant fields (name, email, avatarUrl).\n    return NextResponse.json({ \n        message: \"Profile updated successfully\", \n        updatedUser: { // Send back the fields needed for session update\n            name: updatedUser.name,\n            email: updatedUser.email,\n            avatarUrl: updatedUser.avatarUrl\n        }\n    }, { status: 200 });\n\n  } catch (error: any) {\n    console.error(\"Error updating profile:\", error);\n    // Check for MongoDB duplicate key error for email (though handled above, good as a fallback)\n    if (error.code === 11000 && error.keyPattern?.email) {\n        return NextResponse.json({ message: \"Email already exists.\" }, { status: 409 });\n    }\n    return NextResponse.json({ message: \"Server error during profile update.\", error: error.message }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}