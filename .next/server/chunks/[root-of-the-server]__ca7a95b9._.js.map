{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/cloudinary.ts"],"sourcesContent":["\nimport { v2 as cloudinary } from 'cloudinary';\n\nif (!process.env.CLOUDINARY_CLOUD_NAME) {\n  throw new Error('CLOUDINARY_CLOUD_NAME is not set in environment variables.');\n}\nif (!process.env.CLOUDINARY_API_KEY) {\n  throw new Error('CLOUDINARY_API_KEY is not set in environment variables.');\n}\nif (!process.env.CLOUDINARY_API_SECRET) {\n  throw new Error('CLOUDINARY_API_SECRET is not set in environment variables.');\n}\n\ncloudinary.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n  secure: true, // Ensure HTTPS URLs are returned\n});\n\nexport default cloudinary;\n"],"names":[],"mappings":";;;AACA;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,qBAAqB,EAAE;IACtC,MAAM,IAAI,MAAM;AAClB;AACA,IAAI,CAAC,QAAQ,GAAG,CAAC,kBAAkB,EAAE;IACnC,MAAM,IAAI,MAAM;AAClB;AACA,IAAI,CAAC,QAAQ,GAAG,CAAC,qBAAqB,EAAE;IACtC,MAAM,IAAI,MAAM;AAClB;AAEA,0IAAA,CAAA,KAAU,CAAC,MAAM,CAAC;IAChB,YAAY,QAAQ,GAAG,CAAC,qBAAqB;IAC7C,SAAS,QAAQ,GAAG,CAAC,kBAAkB;IACvC,YAAY,QAAQ,GAAG,CAAC,qBAAqB;IAC7C,QAAQ;AACV;uCAEe,0IAAA,CAAA,KAAU","debugId":null}},
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/models/User.ts"],"sourcesContent":["import mongoose, { Schema, Document, models, model } from \"mongoose\";\n\n\nexport interface IUser extends Document {\n \n  name: string;\n  email: string;\n  passwordHash?: string;\n  role: \"guest\" | \"host\" | \"admin\";\n  stripeAccountId?: string;\n  avatarUrl?: string;\n  createdAt: Date;\n}\n\nconst userSchema = new Schema<IUser>(\n  {\n    id: { type: Number, unique: true }, \n    name: { type: String, required: true, unique: true },\n    email: { type: String, required: true, unique: true },\n    passwordHash: { type: String },\n    role: { type: String, enum: [\"guest\", \"host\", \"admin\"], default: \"guest\" },\n    stripeAccountId: { type: String },\n    avatarUrl: { type: String },\n  },\n  { timestamps: true }\n);\n\n\n\nexport default models.User || model<IUser>(\"User\", userSchema);\n"],"names":[],"mappings":";;;AAAA;;AAcA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAC3B;IACE,IAAI;QAAE,MAAM;QAAQ,QAAQ;IAAK;IACjC,MAAM;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACnD,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,cAAc;QAAE,MAAM;IAAO;IAC7B,MAAM;QAAE,MAAM;QAAQ,MAAM;YAAC;YAAS;YAAQ;SAAQ;QAAE,SAAS;IAAQ;IACzE,iBAAiB;QAAE,MAAM;IAAO;IAChC,WAAW;QAAE,MAAM;IAAO;AAC5B,GACA;IAAE,YAAY;AAAK;uCAKN,yGAAA,CAAA,SAAM,CAAC,IAAI,IAAI,CAAA,GAAA,yGAAA,CAAA,QAAK,AAAD,EAAS,QAAQ","debugId":null}},
    {"offset": {"line": 247, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/utils/db.ts"],"sourcesContent":["import mongoose from \"mongoose\";\nmongoose.set('strictQuery', false);\nconst MONGODB_URL= \"mongodb+srv://paudelsunil16:paudelsunil16@cluster0.dlua3bq.mongodb.net/\";\nconst connect = async () => {\n  try {\n    await mongoose.connect(MONGODB_URL);\n  } catch (error) {\n    throw new Error(\"Connection failed!\");\n  }\n};\n\nexport default connect;"],"names":[],"mappings":";;;AAAA;;AACA,yGAAA,CAAA,UAAQ,CAAC,GAAG,CAAC,eAAe;AAC5B,MAAM,cAAa;AACnB,MAAM,UAAU;IACd,IAAI;QACF,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;IACzB,EAAE,OAAO,OAAO;QACd,MAAM,IAAI,MAAM;IAClB;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["\nimport NextAuth, { type NextAuthOptions } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport User from \"@/models/User\"; \nimport connectDB from \"@/utils/db\"; \nimport bcrypt from \"bcryptjs\";\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n    CredentialsProvider({\n      name: \"Credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"text\", placeholder: \"jsmith@example.com\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          console.log(\"NextAuth: Missing email or password in credentials\");\n          throw new Error(\"Please enter both email and password.\");\n        }\n        console.log(\"NextAuth Authorize: Attempting to connect to DB for user:\", credentials.email);\n        try {\n          await connectDB();\n          console.log(\"NextAuth Authorize: DB connection successful (or already connected).\");\n\n          const user = await User.findOne({ email: credentials.email });\n\n          if (!user) {\n            console.log(\"NextAuth Authorize: No user found with email:\", credentials.email);\n            throw new Error(\"No user found with this email.\");\n          }\n\n          if (!user.passwordHash) {\n            console.log(\"NextAuth Authorize: User account not configured for password login (no passwordHash):\", credentials.email);\n            throw new Error(\"User account is not properly configured for password login.\");\n          }\n\n          const isPasswordCorrect = await bcrypt.compare(\n            credentials.password,\n            user.passwordHash\n          );\n\n          if (!isPasswordCorrect) {\n            console.log(\"NextAuth Authorize: Incorrect password for email:\", credentials.email);\n            throw new Error(\"Invalid password.\");\n          }\n\n          console.log(\"NextAuth Authorize: User authenticated successfully:\", credentials.email);\n          return {\n            id: user._id.toString(),\n            name: user.name,\n            email: user.email,\n            image: user.avatarUrl, \n            role: user.role, // Include role from the user document\n          };\n        } catch (error: any) {\n          console.error(\"Critical error in NextAuth authorize callback:\", error.message);\n          console.error(\"Full error details:\", error); \n          if (error.message === \"Connection failed!\") {\n             throw new Error(\"Database connection error. Please try again later.\");\n          }\n          throw new Error(error.message || \"Authentication failed due to a server error.\");\n        }\n      },\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n  },\n  callbacks: {\n    async jwt({ token, user, trigger, session }) {\n      if (trigger === \"update\" && session?.user) {\n        token.name = session.user.name;\n        token.email = session.user.email;\n        token.picture = session.user.image; \n        token.role = session.user.role; // Ensure role is updated in token if session is updated\n      }\n      if (user) {\n        token.id = user.id;\n        token.name = user.name;\n        token.email = user.email;\n        token.picture = user.image; \n        token.role = user.role; // Add role to token\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token && session.user) { // Ensure session.user exists\n        session.user.id = token.id as string;\n        session.user.name = token.name as string | null | undefined;\n        session.user.email = token.email as string | null | undefined;\n        session.user.image = token.picture as string | null | undefined; \n        session.user.role = token.role as string | null | undefined; // Add role to session user\n      }\n      return session;\n    },\n  },\n  pages: {\n    error: \"/login\", \n    signIn: '/login', \n  },\n  secret: process.env.NEXTAUTH_SECRET,\n};\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;;AACA;AACA;AACA;AACA;AACA;;;;;;AAEO,MAAM,cAA+B;IAC1C,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;oBAAQ,aAAa;gBAAqB;gBACzE,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,QAAQ,GAAG,CAAC;oBACZ,MAAM,IAAI,MAAM;gBAClB;gBACA,QAAQ,GAAG,CAAC,6DAA6D,YAAY,KAAK;gBAC1F,IAAI;oBACF,MAAM,CAAA,GAAA,oHAAA,CAAA,UAAS,AAAD;oBACd,QAAQ,GAAG,CAAC;oBAEZ,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;wBAAE,OAAO,YAAY,KAAK;oBAAC;oBAE3D,IAAI,CAAC,MAAM;wBACT,QAAQ,GAAG,CAAC,iDAAiD,YAAY,KAAK;wBAC9E,MAAM,IAAI,MAAM;oBAClB;oBAEA,IAAI,CAAC,KAAK,YAAY,EAAE;wBACtB,QAAQ,GAAG,CAAC,yFAAyF,YAAY,KAAK;wBACtH,MAAM,IAAI,MAAM;oBAClB;oBAEA,MAAM,oBAAoB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAC5C,YAAY,QAAQ,EACpB,KAAK,YAAY;oBAGnB,IAAI,CAAC,mBAAmB;wBACtB,QAAQ,GAAG,CAAC,qDAAqD,YAAY,KAAK;wBAClF,MAAM,IAAI,MAAM;oBAClB;oBAEA,QAAQ,GAAG,CAAC,wDAAwD,YAAY,KAAK;oBACrF,OAAO;wBACL,IAAI,KAAK,GAAG,CAAC,QAAQ;wBACrB,MAAM,KAAK,IAAI;wBACf,OAAO,KAAK,KAAK;wBACjB,OAAO,KAAK,SAAS;wBACrB,MAAM,KAAK,IAAI;oBACjB;gBACF,EAAE,OAAO,OAAY;oBACnB,QAAQ,KAAK,CAAC,kDAAkD,MAAM,OAAO;oBAC7E,QAAQ,KAAK,CAAC,uBAAuB;oBACrC,IAAI,MAAM,OAAO,KAAK,sBAAsB;wBACzC,MAAM,IAAI,MAAM;oBACnB;oBACA,MAAM,IAAI,MAAM,MAAM,OAAO,IAAI;gBACnC;YACF;QACF;KACD;IACD,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE;YACzC,IAAI,YAAY,YAAY,SAAS,MAAM;gBACzC,MAAM,IAAI,GAAG,QAAQ,IAAI,CAAC,IAAI;gBAC9B,MAAM,KAAK,GAAG,QAAQ,IAAI,CAAC,KAAK;gBAChC,MAAM,OAAO,GAAG,QAAQ,IAAI,CAAC,KAAK;gBAClC,MAAM,IAAI,GAAG,QAAQ,IAAI,CAAC,IAAI,EAAE,wDAAwD;YAC1F;YACA,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,IAAI,GAAG,KAAK,IAAI;gBACtB,MAAM,KAAK,GAAG,KAAK,KAAK;gBACxB,MAAM,OAAO,GAAG,KAAK,KAAK;gBAC1B,MAAM,IAAI,GAAG,KAAK,IAAI,EAAE,oBAAoB;YAC9C;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,SAAS,QAAQ,IAAI,EAAE;gBACzB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;gBAC9B,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;gBAChC,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,OAAO;gBAClC,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI,EAA+B,2BAA2B;YAC1F;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,OAAO;QACP,QAAQ;IACV;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;AACrC;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 387, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/upload/route.ts"],"sourcesContent":["\nimport { NextResponse, type NextRequest } from 'next/server';\nimport cloudinary from '@/lib/cloudinary';\nimport { getServerSession } from 'next-auth/next';\nimport { authOptions } from '@/app/api/auth/[...nextauth]/route';\n\nexport async function POST(request: NextRequest) {\n  console.log('[API /api/upload] Received POST request');\n  const session = await getServerSession(authOptions);\n\n  if (!session || !session.user) {\n    console.log('[API /api/upload] Unauthorized access attempt.');\n    return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });\n  }\n  console.log('[API /api/upload] User authenticated:', session.user.email);\n\n  const formData = await request.formData();\n  const file = formData.get('file') as File | null;\n\n  if (!file) {\n    console.log('[API /api/upload] No file provided in formData.');\n    return NextResponse.json({ message: 'No file provided.' }, { status: 400 });\n  }\n  console.log(`[API /api/upload] File received: ${file.name}, type: ${file.type}, size: ${file.size}`);\n\n  // Convert file to buffer\n  const bytes = await file.arrayBuffer();\n  const buffer = Buffer.from(bytes);\n  console.log('[API /api/upload] File converted to buffer.');\n\n  try {\n    console.log('[API /api/upload] Attempting to upload to Cloudinary...');\n    const uploadResult = await new Promise<{ secure_url: string; public_id: string } | undefined>((resolve, reject) => {\n      const stream = cloudinary.uploader.upload_stream(\n        {\n          resource_type: 'image', \n          folder: 'lodger_properties', \n        },\n        (error, result) => {\n          if (error) {\n            console.error('[API /api/upload] Cloudinary Upload Error:', error);\n            reject(error);\n          } else {\n            console.log('[API /api/upload] Cloudinary Upload Success Result:', result);\n            resolve(result as { secure_url: string; public_id: string } | undefined);\n          }\n        }\n      );\n      stream.end(buffer);\n    });\n\n    if (uploadResult?.secure_url) {\n      console.log('[API /api/upload] Image uploaded successfully. URL:', uploadResult.secure_url);\n      return NextResponse.json({\n        message: 'Image uploaded successfully',\n        imageUrl: uploadResult.secure_url,\n        publicId: uploadResult.public_id,\n      }, { status: 200 });\n    } else {\n      console.error('[API /api/upload] Cloudinary upload failed to return a secure URL. Full result:', uploadResult);\n      throw new Error('Cloudinary upload failed to return a secure URL.');\n    }\n\n  } catch (error: any) {\n    console.error('[API /api/upload] Overall Upload API Error:', error);\n    return NextResponse.json({ message: 'Image upload failed.', error: error.message || 'Unknown server error during upload' }, { status: 500 });\n  }\n}\n\n"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,QAAQ,GAAG,CAAC;IACZ,MAAM,UAAU,MAAM,CAAA,GAAA,+IAAA,CAAA,mBAAgB,AAAD,EAAE,0JAAA,CAAA,cAAW;IAElD,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAI,EAAE;QAC7B,QAAQ,GAAG,CAAC;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAe,GAAG;YAAE,QAAQ;QAAI;IACtE;IACA,QAAQ,GAAG,CAAC,yCAAyC,QAAQ,IAAI,CAAC,KAAK;IAEvE,MAAM,WAAW,MAAM,QAAQ,QAAQ;IACvC,MAAM,OAAO,SAAS,GAAG,CAAC;IAE1B,IAAI,CAAC,MAAM;QACT,QAAQ,GAAG,CAAC;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAoB,GAAG;YAAE,QAAQ;QAAI;IAC3E;IACA,QAAQ,GAAG,CAAC,CAAC,iCAAiC,EAAE,KAAK,IAAI,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,QAAQ,EAAE,KAAK,IAAI,EAAE;IAEnG,yBAAyB;IACzB,MAAM,QAAQ,MAAM,KAAK,WAAW;IACpC,MAAM,SAAS,OAAO,IAAI,CAAC;IAC3B,QAAQ,GAAG,CAAC;IAEZ,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,eAAe,MAAM,IAAI,QAA+D,CAAC,SAAS;YACtG,MAAM,SAAS,0HAAA,CAAA,UAAU,CAAC,QAAQ,CAAC,aAAa,CAC9C;gBACE,eAAe;gBACf,QAAQ;YACV,GACA,CAAC,OAAO;gBACN,IAAI,OAAO;oBACT,QAAQ,KAAK,CAAC,8CAA8C;oBAC5D,OAAO;gBACT,OAAO;oBACL,QAAQ,GAAG,CAAC,uDAAuD;oBACnE,QAAQ;gBACV;YACF;YAEF,OAAO,GAAG,CAAC;QACb;QAEA,IAAI,cAAc,YAAY;YAC5B,QAAQ,GAAG,CAAC,uDAAuD,aAAa,UAAU;YAC1F,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,UAAU,aAAa,UAAU;gBACjC,UAAU,aAAa,SAAS;YAClC,GAAG;gBAAE,QAAQ;YAAI;QACnB,OAAO;YACL,QAAQ,KAAK,CAAC,mFAAmF;YACjG,MAAM,IAAI,MAAM;QAClB;IAEF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,+CAA+C;QAC7D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAwB,OAAO,MAAM,OAAO,IAAI;QAAqC,GAAG;YAAE,QAAQ;QAAI;IAC5I;AACF","debugId":null}}]
}