{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/utils/db.ts"],"sourcesContent":["import mongoose from \"mongoose\";\nmongoose.set('strictQuery', false);\n\n// Ensure this MONGODB_URL is correct and your IP is whitelisted if using Atlas.\nconst MONGODB_URL= \"mongodb+srv://paudelsunil16:paudelsunil16@cluster0.dlua3bq.mongodb.net/\";\n\nconst connectDB = async () => {\n  if (mongoose.connection.readyState >= 1) {\n    console.log(\"MongoDB is already connected.\");\n    return;\n  }\n  try {\n    if (!MONGODB_URL) {\n      console.error(\"[DB Connect] MongoDB URI is not defined. Please set it in your environment variables or configuration.\");\n      throw new Error(\"Server configuration error: MONGODB_URI is not defined.\");\n    }\n    console.log(\"[DB Connect] Attempting to connect to MongoDB...\");\n    await mongoose.connect(MONGODB_URL);\n    console.log(\"[DB Connect] MongoDB connected successfully.\");\n  } catch (error: any) {\n    console.error(\"[DB Connect] MongoDB connection failed:\", error.message);\n    if (error.stack) {\n      console.error(\"[DB Connect] MongoDB connection error stack:\", error.stack);\n    } else {\n      console.error(\"[DB Connect] MongoDB connection error details:\", error);\n    }\n    // Construct a new error to ensure it's an Error instance with a clear message\n    throw new Error(\"Database connection failed: \" + error.message);\n  }\n};\n\nexport default connectDB;"],"names":[],"mappings":";;;AAAA;;AACA,yGAAA,CAAA,UAAQ,CAAC,GAAG,CAAC,eAAe;AAE5B,gFAAgF;AAChF,MAAM,cAAa;AAEnB,MAAM,YAAY;IAChB,IAAI,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,UAAU,IAAI,GAAG;QACvC,QAAQ,GAAG,CAAC;QACZ;IACF;IACA,IAAI;QACF,uCAAkB;;QAGlB;QACA,QAAQ,GAAG,CAAC;QACZ,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QACvB,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,2CAA2C,MAAM,OAAO;QACtE,IAAI,MAAM,KAAK,EAAE;YACf,QAAQ,KAAK,CAAC,gDAAgD,MAAM,KAAK;QAC3E,OAAO;YACL,QAAQ,KAAK,CAAC,kDAAkD;QAClE;QACA,8EAA8E;QAC9E,MAAM,IAAI,MAAM,iCAAiC,MAAM,OAAO;IAChE;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 194, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/models/User.ts"],"sourcesContent":["\nimport mongoose, { Schema, Document } from \"mongoose\";\n\nexport interface IUser extends Document {\n  _id: mongoose.Types.ObjectId; // Explicitly define _id\n  name: string;\n  email: string;\n  passwordHash?: string;\n  role: \"guest\" | \"host\" | \"admin\";\n  stripeAccountId?: string;\n  avatarUrl?: string;\n  createdAt: Date;\n  updatedAt: Date; // Mongoose adds this with timestamps\n}\n\nconst userSchema = new Schema<IUser>(\n  {\n    name: { type: String, required: true },\n    email: { type: String, required: true, unique: true },\n    passwordHash: { type: String },\n    role: { type: String, enum: [\"guest\", \"host\", \"admin\"], default: \"guest\" },\n    stripeAccountId: { type: String },\n    avatarUrl: { type: String },\n  },\n  { \n    timestamps: true,\n    toJSON: {\n      virtuals: true, // ensure virtuals are included\n      transform: function (doc, ret) {\n        ret.id = ret._id.toString(); // map _id to id\n        delete ret._id;\n        delete ret.passwordHash; // remove passwordHash\n        delete ret.__v; // remove __v\n      }\n    },\n    toObject: { // Also apply transform for toObject if needed elsewhere\n      virtuals: true,\n      transform: function (doc, ret) {\n        ret.id = ret._id.toString();\n        delete ret._id;\n        delete ret.passwordHash;\n        delete ret.__v;\n      }\n    }\n  }\n);\n\nexport default mongoose.models.User || mongoose.model<IUser>(\"User\", userSchema);\n"],"names":[],"mappings":";;;AACA;;AAcA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAC3B;IACE,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,cAAc;QAAE,MAAM;IAAO;IAC7B,MAAM;QAAE,MAAM;QAAQ,MAAM;YAAC;YAAS;YAAQ;SAAQ;QAAE,SAAS;IAAQ;IACzE,iBAAiB;QAAE,MAAM;IAAO;IAChC,WAAW;QAAE,MAAM;IAAO;AAC5B,GACA;IACE,YAAY;IACZ,QAAQ;QACN,UAAU;QACV,WAAW,SAAU,GAAG,EAAE,GAAG;YAC3B,IAAI,EAAE,GAAG,IAAI,GAAG,CAAC,QAAQ,IAAI,gBAAgB;YAC7C,OAAO,IAAI,GAAG;YACd,OAAO,IAAI,YAAY,EAAE,sBAAsB;YAC/C,OAAO,IAAI,GAAG,EAAE,aAAa;QAC/B;IACF;IACA,UAAU;QACR,UAAU;QACV,WAAW,SAAU,GAAG,EAAE,GAAG;YAC3B,IAAI,EAAE,GAAG,IAAI,GAAG,CAAC,QAAQ;YACzB,OAAO,IAAI,GAAG;YACd,OAAO,IAAI,YAAY;YACvB,OAAO,IAAI,GAAG;QAChB;IACF;AACF;uCAGa,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAQ,QAAQ","debugId":null}},
    {"offset": {"line": 255, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["\nimport NextAuth, { type NextAuthOptions } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport bcrypt from \"bcryptjs\";\n\nimport connectDB from \"@/utils/db\";         // MongoDB connection utility\nimport User from \"@/models/User\";           // Mongoose User model\n\n// Check for NEXTAUTH_SECRET at module load time\nif (!process.env.NEXTAUTH_SECRET) {\n  console.warn(\n    \"\\x1b[33m%s\\x1b[0m\", // Yellow text\n    \"[NextAuth Warning] NEXTAUTH_SECRET environment variable is not set! \" +\n    \"Authentication will not work reliably. Please ensure it is set in your environment.\"\n  );\n}\n\nexport const authOptions: NextAuthOptions = {\n  // === Authentication Providers ===\n  providers: [\n    CredentialsProvider({\n      id: \"credentials\",\n      name: \"Credentials\",\n\n      // Fields for sign-in formx\n      credentials: {\n        email: { label: \"Email\", type: \"text\", placeholder: \"jsmith@example.com\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n\n      // Core login logic\n      async authorize(credentials) {\n        console.log(\"[Authorize] Credentials received:\", credentials ? { email: credentials.email, password_exists: !!credentials.password } : \"null_credentials\");\n\n        // Validate input\n        if (!credentials?.email || !credentials?.password) {\n          console.log(\"[Authorize] Missing email or password.\");\n          throw new Error(\"Please enter both email and password.\");\n        }\n\n        try {\n          console.log(\"[Authorize] Connecting to DB...\");\n          await connectDB();\n          console.log(\"[Authorize] DB connection successful.\");\n\n          const user = await User.findOne({ email: credentials.email });\n\n          if (!user) {\n            console.log(\"[Authorize] No user found with email:\", credentials.email);\n            throw new Error(\"No user found with this email.\");\n          }\n\n          if (!user.passwordHash) {\n            console.log(\"[Authorize] User has no password set:\", credentials.email);\n            throw new Error(\"User account is not properly configured for password login.\");\n          }\n\n          const isValidPassword = await bcrypt.compare(credentials.password, user.passwordHash);\n          if (!isValidPassword) {\n            console.log(\"[Authorize] Incorrect password for:\", credentials.email);\n            throw new Error(\"Invalid password.\");\n          }\n\n          // Success: Return user data matching the `User` interface in next-auth.d.ts\n          console.log(\"[Authorize] Login success for user:\", user._id.toString(), user.email);\n          return {\n            id: user._id.toString(), // Mongoose _id to string\n            name: user.name,\n            email: user.email,\n            image: user.avatarUrl, // This will map to DefaultAuthUser's `image`\n            role: user.role,\n          };\n        } catch (error: any) {\n          console.error(\"[Authorize] Unexpected error:\", error.message, error.stack);\n\n          // Re-throw specific known errors for NextAuth to handle and potentially display to user\n          if (\n            [\n              \"No user found with this email.\",\n              \"Invalid password.\",\n              \"User account is not properly configured for password login.\",\n              \"Please enter both email and password.\",\n            ].includes(error.message) || error.message.startsWith(\"Database connection failed:\") || error.message.startsWith(\"Server configuration error:\")\n          ) {\n            throw error;\n          }\n          // For other unexpected errors, throw a generic message\n          throw new Error(\"Authentication failed due to an unexpected server issue. Please try again.\");\n        }\n      },\n    }),\n  ],\n\n  // === Session Configuration ===\n  session: {\n    strategy: \"jwt\", // Use JWT tokens instead of DB sessions\n  },\n\n  // === Callback Functions ===\n  callbacks: {\n    // Modify JWT on login or session update\n    async jwt({ token, user, trigger, session: newSessionData }) { // Renamed `session` to `newSessionData` to avoid conflict\n      try {\n        // On initial sign in, the `user` object from `authorize` is available\n        if (user) {\n          console.log(\"[JWT Callback] Initial user object from authorize:\", user);\n          token.id = user.id;\n          token.name = user.name;\n          token.email = user.email;\n          token.picture = user.image; // `user.image` from authorize maps to `token.picture`\n          token.role = user.role;\n        }\n\n        // Handle session updates (e.g., user updates profile)\n        if (trigger === \"update\" && newSessionData?.user) {\n          console.log(\"[JWT Callback] Updating token from session update data:\", newSessionData.user);\n          token.name = newSessionData.user.name;\n          token.email = newSessionData.user.email;\n          token.picture = newSessionData.user.image;\n          token.role = newSessionData.user.role;\n        }\n        console.log(\"[JWT Callback] Token before returning:\", token);\n        return token;\n      } catch (error: any) {\n        console.error(\"[JWT Callback] Error in JWT callback:\", error.message, error.stack);\n        // Return existing token or throw to signify critical failure.\n        // Returning existing token might lead to inconsistent state if update failed.\n        // For now, returning token to prevent complete session breakage if possible.\n        return token;\n      }\n    },\n\n    // Attach token data to session for use on client side\n    async session({ session, token }) {\n      try {\n        console.log(\"[Session Callback] Token received:\", token);\n        if (token) {\n          // Ensure session.user exists and is structured according to `next-auth.d.ts`\n          session.user = {\n            id: token.id as string,\n            name: token.name,\n            email: token.email,\n            image: token.picture, // Map token.picture (from JWT) to session.user.image\n            role: token.role as string | undefined,\n          };\n        }\n        console.log(\"[Session Callback] Session user before returning:\", session.user);\n        return session;\n      } catch (error: any) {\n        console.error(\"[Session Callback] Error in session callback:\", error.message, error.stack);\n        // Return existing session to prevent complete breakage if possible.\n        return session;\n      }\n    },\n  },\n\n  // === Custom Auth Pages ===\n  pages: {\n    signIn: \"/login\",\n    error: \"/login\", // Errors will append ?error= to the URL\n  },\n\n  // === Secret for signing JWT ===\n  secret: process.env.NEXTAUTH_SECRET\n};\n\n// Export for Next.js API routes\nconst handler = NextAuth(authOptions);\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 425, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/models/Booking.ts"],"sourcesContent":["\nimport mongoose, { Schema, Document } from 'mongoose';\nimport type { Booking as BookingType, PaymentStatus, BookingStatus } from '@/lib/types';\n\nexport interface BookingDocument extends Omit<BookingType, 'id' | 'createdAt' | 'listingId' | 'guestId'>, Document {\n  listingId: mongoose.Types.ObjectId;\n  guestId: mongoose.Types.ObjectId;\n}\n\nconst bookingSchema = new Schema<BookingDocument>(\n  {\n    listingId: {\n      type: Schema.Types.ObjectId,\n      ref: 'Property',\n      required: true,\n    },\n    guestId: {\n      type: Schema.Types.ObjectId,\n      ref: 'User',\n      required: true,\n    },\n    startDate: {\n      type: Date,\n      required: true,\n    },\n    endDate: {\n      type: Date,\n      required: true,\n    },\n    totalPrice: {\n      type: Number,\n      required: true,\n      min: 0,\n    },\n    paymentStatus: {\n      type: String,\n      enum: ['pending', 'paid', 'failed', 'refunded'] as PaymentStatus[],\n      required: true,\n      default: 'pending',\n    },\n    bookingStatus: {\n      type: String,\n      enum: [\n        'pending_confirmation', \n        'pending_payment',\n        'confirmed_by_host', \n        'rejected_by_host', \n        'cancelled_by_guest',\n        'cancelled_by_admin', // Added new status\n        'completed',\n        'no_show'\n      ] as BookingStatus[],\n      required: true,\n      default: 'pending_confirmation', \n    },\n  },\n  { timestamps: true }\n);\n\nbookingSchema.index({ listingId: 1, startDate: 1, endDate: 1 });\nbookingSchema.index({ guestId: 1 });\n\nexport default mongoose.models.Booking || mongoose.model<BookingDocument>(\"Booking\", bookingSchema);\n"],"names":[],"mappings":";;;AACA;;AAQA,MAAM,gBAAgB,IAAI,yGAAA,CAAA,SAAM,CAC9B;IACE,WAAW;QACT,MAAM,yGAAA,CAAA,SAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,KAAK;QACL,UAAU;IACZ;IACA,SAAS;QACP,MAAM,yGAAA,CAAA,SAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,KAAK;QACL,UAAU;IACZ;IACA,WAAW;QACT,MAAM;QACN,UAAU;IACZ;IACA,SAAS;QACP,MAAM;QACN,UAAU;IACZ;IACA,YAAY;QACV,MAAM;QACN,UAAU;QACV,KAAK;IACP;IACA,eAAe;QACb,MAAM;QACN,MAAM;YAAC;YAAW;YAAQ;YAAU;SAAW;QAC/C,UAAU;QACV,SAAS;IACX;IACA,eAAe;QACb,MAAM;QACN,MAAM;YACJ;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;QACD,UAAU;QACV,SAAS;IACX;AACF,GACA;IAAE,YAAY;AAAK;AAGrB,cAAc,KAAK,CAAC;IAAE,WAAW;IAAG,WAAW;IAAG,SAAS;AAAE;AAC7D,cAAc,KAAK,CAAC;IAAE,SAAS;AAAE;uCAElB,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,OAAO,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAkB,WAAW","debugId":null}},
    {"offset": {"line": 498, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/models/Property.ts"],"sourcesContent":["\nimport mongoose, { Schema, Document } from 'mongoose';\nimport type { Property as PropertyType, PricePeriod } from '@/lib/types';\n\n// BookedDateRange subdocument schema and array are removed from here\n\nexport interface PropertyDocument extends Omit<PropertyType, 'id' | 'hostId' | 'images' | 'createdAt' | 'host'>, Document {\n  hostId: mongoose.Types.ObjectId;\n  images: string[];\n  price: number;\n  pricePeriod: PricePeriod;\n  host: {\n    name: string;\n    avatarUrl?: string;\n  };\n  createdAt: Date;\n  updatedAt: Date;\n  availableFrom?: Date;\n  availableTo?: Date;\n  // bookedDateRanges field is removed\n}\n\nconst propertySchema = new Schema<PropertyDocument>(\n  {\n    hostId: {\n      type: Schema.Types.ObjectId,\n      ref: 'User',\n      required: true,\n    },\n    title: {\n      type: String,\n      required: true,\n      trim: true,\n    },\n    description: {\n      type: String,\n      required: true,\n    },\n    price: {\n      type: Number,\n      required: true,\n      min: 0,\n    },\n    pricePeriod: {\n      type: String,\n      enum: ['nightly', 'weekly', 'monthly'] as PricePeriod[],\n      required: true,\n      default: 'nightly',\n    },\n    location: {\n      type: String,\n      required: true,\n      trim: true,\n    },\n    address: {\n      type: String,\n      trim: true,\n    },\n    maxGuests: {\n      type: Number,\n      required: true,\n      min: 1,\n    },\n    images: {\n      type: [String],\n      validate: {\n        validator: function(v: string[]) {\n          return v == null || v.length === 0 || v.every(url => typeof url === 'string' && url.startsWith('http'));\n        },\n        message: 'All image entries must be valid URLs.'\n      },\n      default: [],\n    },\n    bedrooms: {\n      type: Number,\n      required: true,\n      min: 0,\n    },\n    bathrooms: {\n      type: Number,\n      required: true,\n      min: 0,\n    },\n    amenities: {\n      type: [String],\n      default: [],\n    },\n    type: {\n      type: String,\n      enum: ['House', 'Apartment', 'Room', 'Unique Stay'],\n      required: true,\n    },\n    host: {\n      name: { type: String, required: true },\n      avatarUrl: { type: String },\n    },\n    rating: {\n      type: Number,\n      min: 0,\n      max: 5,\n    },\n    reviewsCount: {\n      type: Number,\n      min: 0,\n      default: 0,\n    },\n    availableFrom: {\n      type: Date,\n      required: false,\n    },\n    availableTo: {\n      type: Date,\n      required: false,\n    },\n    // bookedDateRanges field is removed\n  },\n  {\n    timestamps: true,\n    toJSON: {\n      virtuals: true,\n      transform: function (doc, ret) {\n        ret.id = ret._id.toString();\n        delete ret._id;\n        delete ret.__v;\n        if (ret.hostId instanceof mongoose.Types.ObjectId) {\n          ret.hostId = ret.hostId.toString();\n        }\n        // Transformation for bookedDateRanges is removed\n      }\n    },\n    toObject: {\n      virtuals: true,\n      transform: function (doc, ret) {\n        ret.id = ret._id.toString();\n        delete ret._id;\n        delete ret.__v;\n        if (ret.hostId instanceof mongoose.Types.ObjectId) {\n          ret.hostId = ret.hostId.toString();\n        }\n        // Transformation for bookedDateRanges is removed\n      }\n    }\n  }\n);\n\npropertySchema.index({ location: 'text', title: 'text', description: 'text' });\npropertySchema.index({ hostId: 1 });\npropertySchema.index({ createdAt: -1 });\n// Index for bookedDateRanges.bookingId is removed\n\nexport default mongoose.models.Property || mongoose.model<PropertyDocument>(\"Property\", propertySchema);\n"],"names":[],"mappings":";;;AACA;;AAqBA,MAAM,iBAAiB,IAAI,yGAAA,CAAA,SAAM,CAC/B;IACE,QAAQ;QACN,MAAM,yGAAA,CAAA,SAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,KAAK;QACL,UAAU;IACZ;IACA,OAAO;QACL,MAAM;QACN,UAAU;QACV,MAAM;IACR;IACA,aAAa;QACX,MAAM;QACN,UAAU;IACZ;IACA,OAAO;QACL,MAAM;QACN,UAAU;QACV,KAAK;IACP;IACA,aAAa;QACX,MAAM;QACN,MAAM;YAAC;YAAW;YAAU;SAAU;QACtC,UAAU;QACV,SAAS;IACX;IACA,UAAU;QACR,MAAM;QACN,UAAU;QACV,MAAM;IACR;IACA,SAAS;QACP,MAAM;QACN,MAAM;IACR;IACA,WAAW;QACT,MAAM;QACN,UAAU;QACV,KAAK;IACP;IACA,QAAQ;QACN,MAAM;YAAC;SAAO;QACd,UAAU;YACR,WAAW,SAAS,CAAW;gBAC7B,OAAO,KAAK,QAAQ,EAAE,MAAM,KAAK,KAAK,EAAE,KAAK,CAAC,CAAA,MAAO,OAAO,QAAQ,YAAY,IAAI,UAAU,CAAC;YACjG;YACA,SAAS;QACX;QACA,SAAS,EAAE;IACb;IACA,UAAU;QACR,MAAM;QACN,UAAU;QACV,KAAK;IACP;IACA,WAAW;QACT,MAAM;QACN,UAAU;QACV,KAAK;IACP;IACA,WAAW;QACT,MAAM;YAAC;SAAO;QACd,SAAS,EAAE;IACb;IACA,MAAM;QACJ,MAAM;QACN,MAAM;YAAC;YAAS;YAAa;YAAQ;SAAc;QACnD,UAAU;IACZ;IACA,MAAM;QACJ,MAAM;YAAE,MAAM;YAAQ,UAAU;QAAK;QACrC,WAAW;YAAE,MAAM;QAAO;IAC5B;IACA,QAAQ;QACN,MAAM;QACN,KAAK;QACL,KAAK;IACP;IACA,cAAc;QACZ,MAAM;QACN,KAAK;QACL,SAAS;IACX;IACA,eAAe;QACb,MAAM;QACN,UAAU;IACZ;IACA,aAAa;QACX,MAAM;QACN,UAAU;IACZ;AAEF,GACA;IACE,YAAY;IACZ,QAAQ;QACN,UAAU;QACV,WAAW,SAAU,GAAG,EAAE,GAAG;YAC3B,IAAI,EAAE,GAAG,IAAI,GAAG,CAAC,QAAQ;YACzB,OAAO,IAAI,GAAG;YACd,OAAO,IAAI,GAAG;YACd,IAAI,IAAI,MAAM,YAAY,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE;gBACjD,IAAI,MAAM,GAAG,IAAI,MAAM,CAAC,QAAQ;YAClC;QACA,iDAAiD;QACnD;IACF;IACA,UAAU;QACR,UAAU;QACV,WAAW,SAAU,GAAG,EAAE,GAAG;YAC3B,IAAI,EAAE,GAAG,IAAI,GAAG,CAAC,QAAQ;YACzB,OAAO,IAAI,GAAG;YACd,OAAO,IAAI,GAAG;YACd,IAAI,IAAI,MAAM,YAAY,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE;gBACjD,IAAI,MAAM,GAAG,IAAI,MAAM,CAAC,QAAQ;YAClC;QACA,iDAAiD;QACnD;IACF;AACF;AAGF,eAAe,KAAK,CAAC;IAAE,UAAU;IAAQ,OAAO;IAAQ,aAAa;AAAO;AAC5E,eAAe,KAAK,CAAC;IAAE,QAAQ;AAAE;AACjC,eAAe,KAAK,CAAC;IAAE,WAAW,CAAC;AAAE;uCAGtB,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,QAAQ,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAmB,YAAY","debugId":null}},
    {"offset": {"line": 657, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/models/BookedDateRange.ts"],"sourcesContent":["\nimport mongoose, { Schema, Document } from 'mongoose';\nimport type { BookingStatus } from '@/lib/types';\n\n// Interface for the Mongoose Document\nexport interface BookedDateRangeDocument extends Document {\n  _id: mongoose.Types.ObjectId;\n  propertyId: mongoose.Types.ObjectId;\n  bookingId: mongoose.Types.ObjectId;\n  startDate: Date;\n  endDate: Date;\n  status: BookingStatus;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst bookedDateRangeSchema = new Schema<BookedDateRangeDocument>(\n  {\n    propertyId: {\n      type: Schema.Types.ObjectId,\n      ref: 'Property',\n      required: true,\n      index: true,\n    },\n    bookingId: {\n      type: Schema.Types.ObjectId,\n      ref: 'Booking',\n      required: true,\n      unique: true, \n      index: true,\n    },\n    startDate: {\n      type: Date,\n      required: true,\n    },\n    endDate: {\n      type: Date,\n      required: true,\n    },\n    status: {\n      type: String,\n      enum: [\n        'pending_confirmation',\n        'pending_payment',\n        'confirmed_by_host',\n        'rejected_by_host',\n        'cancelled_by_guest',\n        'cancelled_by_admin', // Added new status\n        'completed',\n        'no_show',\n      ] as BookingStatus[],\n      required: true,\n      index: true,\n    },\n  },\n  { timestamps: true }\n);\n\n// Compound index to quickly find overlapping ranges for a property\nbookedDateRangeSchema.index({ propertyId: 1, startDate: 1, endDate: 1 });\nbookedDateRangeSchema.index({ propertyId: 1, status: 1 });\n\n\nexport default mongoose.models.BookedDateRange || mongoose.model<BookedDateRangeDocument>(\"BookedDateRange\", bookedDateRangeSchema);\n"],"names":[],"mappings":";;;AACA;;AAeA,MAAM,wBAAwB,IAAI,yGAAA,CAAA,SAAM,CACtC;IACE,YAAY;QACV,MAAM,yGAAA,CAAA,SAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,KAAK;QACL,UAAU;QACV,OAAO;IACT;IACA,WAAW;QACT,MAAM,yGAAA,CAAA,SAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,KAAK;QACL,UAAU;QACV,QAAQ;QACR,OAAO;IACT;IACA,WAAW;QACT,MAAM;QACN,UAAU;IACZ;IACA,SAAS;QACP,MAAM;QACN,UAAU;IACZ;IACA,QAAQ;QACN,MAAM;QACN,MAAM;YACJ;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;QACD,UAAU;QACV,OAAO;IACT;AACF,GACA;IAAE,YAAY;AAAK;AAGrB,mEAAmE;AACnE,sBAAsB,KAAK,CAAC;IAAE,YAAY;IAAG,WAAW;IAAG,SAAS;AAAE;AACtE,sBAAsB,KAAK,CAAC;IAAE,YAAY;IAAG,QAAQ;AAAE;uCAGxC,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,eAAe,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAA0B,mBAAmB","debugId":null}},
    {"offset": {"line": 775, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/utils/mailer.ts"],"sourcesContent":["\nimport nodemailer from 'nodemailer';\nimport type { Transporter } from 'nodemailer';\n\ninterface MailOptions {\n  to: string;\n  subject: string;\n  text: string;\n  html?: string;\n}\n\n// Hardcoded Gmail credentials for testing\nconst GOOGLE_EMAIL = \"pacbot24@gmail.com\";\nconst GOOGLE_PASSWORD = \"ofzyqssefycvpawh\"; // This appears to be an App Password\n\nlet transporterInstance: Transporter | null = null;\nlet mailerConfigError: string | null = null;\n\nif (!GOOGLE_EMAIL || !GOOGLE_PASSWORD) {\n  // This condition should not be met with hardcoded values but kept for structural integrity\n  mailerConfigError = \"Hardcoded Gmail credentials are missing. Emails will not be sent.\";\n  console.warn(`[Mailer] ${mailerConfigError}`);\n} else {\n  transporterInstance = nodemailer.createTransport({\n    service: 'gmail',\n    auth: {\n      user: GOOGLE_EMAIL,\n      pass: GOOGLE_PASSWORD,\n    },\n  });\n\n  // Verify connection configuration during setup\n  transporterInstance.verify((error, success) => {\n    if (error) {\n      mailerConfigError = `Mailer (Gmail) configuration error during verification: ${error.message}. Emails may not be sent.`;\n      console.error(`[Mailer] ${mailerConfigError}`);\n      transporterInstance = null; // Invalidate transporter if verification fails\n    } else {\n      console.log('[Mailer] Gmail email service is configured with hardcoded credentials and ready to send emails.');\n    }\n  });\n}\n\nexport const sendEmail = async (options: MailOptions): Promise<{success: boolean; messageId?: string; error?: string}> => {\n  if (mailerConfigError || !transporterInstance) {\n    const errorMessage = mailerConfigError || \"Mailer (Gmail) not initialized or verification failed.\";\n    console.warn(`[Mailer] Attempted to send email but Gmail mailer is not properly configured. Subject: \"${options.subject}\", To: \"${options.to}\"`);\n    console.warn(`[Mailer] Configuration Error: ${errorMessage}`);\n    return { success: false, error: errorMessage };\n  }\n\n  try {\n    const info = await transporterInstance.sendMail({\n      from: `\"${process.env.APP_NAME || 'Lodger App'}\" <${GOOGLE_EMAIL}>`, // Using hardcoded GOOGLE_EMAIL as the sender address\n      to: options.to,\n      subject: options.subject,\n      text: options.text,\n      html: options.html,\n    });\n    console.log(`[Mailer] Email sent successfully via Gmail. Subject: \"${options.subject}\", To: \"${options.to}\", Message ID: ${info.messageId}`);\n    return { success: true, messageId: info.messageId };\n  } catch (error: any) {\n    let specificError = error.message;\n    if (error.code === 'EAUTH' || (error.responseCode && error.responseCode === 535)) {\n        specificError = \"Authentication failed with Gmail. Check your hardcoded GOOGLE_EMAIL and GOOGLE_PASSWORD. Ensure 'Less secure app access' is handled appropriately if not using an App Password (not recommended for regular passwords).\";\n        console.error(`[Mailer] Gmail Authentication Error: ${specificError}`);\n    } else {\n        console.error(`[Mailer] Error sending email via Gmail. Subject: \"${options.subject}\", To: \"${options.to}\"`, error);\n    }\n    return { success: false, error: specificError };\n  }\n};\n"],"names":[],"mappings":";;;AACA;;AAUA,0CAA0C;AAC1C,MAAM,eAAe;AACrB,MAAM,kBAAkB,oBAAoB,qCAAqC;AAEjF,IAAI,sBAA0C;AAC9C,IAAI,oBAAmC;AAEvC,uCAAuC;;AAIvC,OAAO;IACL,sBAAsB,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;QAC/C,SAAS;QACT,MAAM;YACJ,MAAM;YACN,MAAM;QACR;IACF;IAEA,+CAA+C;IAC/C,oBAAoB,MAAM,CAAC,CAAC,OAAO;QACjC,IAAI,OAAO;YACT,oBAAoB,CAAC,wDAAwD,EAAE,MAAM,OAAO,CAAC,yBAAyB,CAAC;YACvH,QAAQ,KAAK,CAAC,CAAC,SAAS,EAAE,mBAAmB;YAC7C,sBAAsB,MAAM,+CAA+C;QAC7E,OAAO;YACL,QAAQ,GAAG,CAAC;QACd;IACF;AACF;AAEO,MAAM,YAAY,OAAO;IAC9B,IAAI,qBAAqB,CAAC,qBAAqB;QAC7C,MAAM,eAAe,qBAAqB;QAC1C,QAAQ,IAAI,CAAC,CAAC,wFAAwF,EAAE,QAAQ,OAAO,CAAC,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;QAC/I,QAAQ,IAAI,CAAC,CAAC,8BAA8B,EAAE,cAAc;QAC5D,OAAO;YAAE,SAAS;YAAO,OAAO;QAAa;IAC/C;IAEA,IAAI;QACF,MAAM,OAAO,MAAM,oBAAoB,QAAQ,CAAC;YAC9C,MAAM,CAAC,CAAC,EAAE,QAAQ,GAAG,CAAC,QAAQ,IAAI,aAAa,GAAG,EAAE,aAAa,CAAC,CAAC;YACnE,IAAI,QAAQ,EAAE;YACd,SAAS,QAAQ,OAAO;YACxB,MAAM,QAAQ,IAAI;YAClB,MAAM,QAAQ,IAAI;QACpB;QACA,QAAQ,GAAG,CAAC,CAAC,sDAAsD,EAAE,QAAQ,OAAO,CAAC,QAAQ,EAAE,QAAQ,EAAE,CAAC,eAAe,EAAE,KAAK,SAAS,EAAE;QAC3I,OAAO;YAAE,SAAS;YAAM,WAAW,KAAK,SAAS;QAAC;IACpD,EAAE,OAAO,OAAY;QACnB,IAAI,gBAAgB,MAAM,OAAO;QACjC,IAAI,MAAM,IAAI,KAAK,WAAY,MAAM,YAAY,IAAI,MAAM,YAAY,KAAK,KAAM;YAC9E,gBAAgB;YAChB,QAAQ,KAAK,CAAC,CAAC,qCAAqC,EAAE,eAAe;QACzE,OAAO;YACH,QAAQ,KAAK,CAAC,CAAC,kDAAkD,EAAE,QAAQ,OAAO,CAAC,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE;QAChH;QACA,OAAO;YAAE,SAAS;YAAO,OAAO;QAAc;IAChD;AACF","debugId":null}},
    {"offset": {"line": 849, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/bookings/initiate-payment/route.ts"],"sourcesContent":["\n'use server';\n\nimport { NextResponse, type NextRequest } from 'next/server';\nimport { getServerSession } from 'next-auth/next';\nimport Stripe from 'stripe';\nimport { authOptions } from '@/app/api/auth/[...nextauth]/route';\nimport connectDB from '@/utils/db';\nimport Booking, { type BookingDocument } from '@/models/Booking';\nimport PropertyModel, { type PropertyDocument } from '@/models/Property';\nimport BookedDateRangeModel from '@/models/BookedDateRange'; // Import new model\nimport UserModel, { type IUser } from '@/models/User';\nimport * as z from 'zod';\nimport { differenceInCalendarDays, startOfDay, format } from 'date-fns';\nimport { sendEmail } from '@/utils/mailer';\nimport mongoose from 'mongoose';\nimport type { BookingStatus } from '@/lib/types';\n\nconst STRIPE_SECRET_KEY = process.env.STRIPE_SECRET_KEY;\nconst stripe = new Stripe(STRIPE_SECRET_KEY!, {\n  apiVersion: '2024-04-10',\n});\n\nconst initiatePaymentSchema = z.object({\n  propertyId: z.string().refine((val) => /^[0-9a-fA-F]{24}$/.test(val), {\n    message: \"Invalid property ID format.\",\n  }),\n  startDate: z.coerce.date().refine((date) => date >= startOfDay(new Date()), {\n    message: \"Start date cannot be in the past.\",\n  }),\n  endDate: z.coerce.date(),\n}).refine(data => data.endDate > data.startDate, {\n  message: \"End date must be after start date.\",\n  path: [\"endDate\"],\n});\n\nconst APP_URL = process.env.NEXTAUTH_URL || 'http://localhost:9002'; // Use NEXTAUTH_URL with a fallback\n\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session || !session.user || !session.user.id || !session.user.email) {\n      return NextResponse.json({ message: 'Unauthorized: You must be logged in and have an email address.' }, { status: 401 });\n    }\n\n    const guestId = session.user.id;\n    const guestEmail = session.user.email;\n    const guestName = session.user.name || 'Valued Guest';\n\n    const body = await request.json();\n    const parsedBody = initiatePaymentSchema.safeParse(body);\n\n    if (!parsedBody.success) {\n      return NextResponse.json({ message: 'Invalid data provided.', errors: parsedBody.error.format() }, { status: 400 });\n    }\n\n    const { propertyId, startDate, endDate } = parsedBody.data;\n    const normalizedStartDate = startOfDay(startDate);\n    const normalizedEndDate = startOfDay(endDate);\n\n    await connectDB();\n\n    let property = await PropertyModel.findById(propertyId) as PropertyDocument | null;\n    if (!property) {\n      return NextResponse.json({ message: 'Property not found.' }, { status: 404 });\n    }\n\n    if (property.hostId.toString() === guestId) {\n        return NextResponse.json({ message: 'Hosts cannot book their own properties.' }, { status: 403 });\n    }\n\n    if (property.availableFrom && normalizedStartDate < startOfDay(new Date(property.availableFrom))) {\n        return NextResponse.json({ message: 'Booking start date is before property availability window.' }, { status: 400 });\n    }\n    if (property.availableTo && normalizedEndDate > startOfDay(new Date(property.availableTo))) {\n        return NextResponse.json({ message: 'Booking end date is after property availability window.' }, { status: 400 });\n    }\n\n    // Check for conflicting BookedDateRange documents\n    const conflictingRangeDoc = await BookedDateRangeModel.findOne({\n      propertyId: new mongoose.Types.ObjectId(propertyId),\n      status: { $in: ['confirmed_by_host', 'pending_confirmation', 'pending_payment'] as BookingStatus[] }, // Keep 'pending_payment' here for safety\n      startDate: { $lt: normalizedEndDate },\n      endDate: { $gt: normalizedStartDate },\n    });\n\n    if (conflictingRangeDoc) {\n      console.log(\"[API /bookings/initiate-payment POST] Conflict found with existing BookedDateRange document:\", conflictingRangeDoc._id.toString(), \"Status:\", conflictingRangeDoc.status);\n      return NextResponse.json({ message: 'These dates are no longer available for this property. Please choose different dates.' }, { status: 409 });\n    }\n\n    let numberOfUnits = 0;\n    if (property.pricePeriod === 'nightly') {\n      numberOfUnits = differenceInCalendarDays(normalizedEndDate, normalizedStartDate);\n      if (numberOfUnits === 0 && normalizedStartDate.getTime() === normalizedEndDate.getTime()){\n        numberOfUnits = 1;\n      }\n    } else if (property.pricePeriod === 'weekly') {\n      numberOfUnits = Math.max(1, Math.ceil(differenceInCalendarDays(normalizedEndDate, normalizedStartDate) / 7));\n    } else if (property.pricePeriod === 'monthly') {\n      numberOfUnits = Math.max(1, Math.ceil(differenceInCalendarDays(normalizedEndDate, normalizedStartDate) / 30));\n    }\n\n     if (numberOfUnits <= 0) {\n        return NextResponse.json({ message: 'Booking duration is invalid for the selected price period.' }, { status: 400 });\n    }\n\n    const totalPrice = property.price * numberOfUnits;\n\n    const newBooking = new Booking({\n      listingId: property._id,\n      guestId: new mongoose.Types.ObjectId(guestId),\n      startDate: normalizedStartDate,\n      endDate: normalizedEndDate,\n      totalPrice,\n      paymentStatus: 'pending', // Payment status is 'pending'\n      bookingStatus: 'pending_confirmation', // Booking status is now 'pending_confirmation'\n    }) as BookingDocument;\n    await newBooking.save();\n    console.log(\"[API /bookings/initiate-payment POST] New booking created with 'pending_confirmation' status:\", newBooking._id.toString());\n\n    // Create a new BookedDateRange document\n    const newBookedDateRange = new BookedDateRangeModel({\n        propertyId: property._id,\n        bookingId: newBooking._id,\n        startDate: newBooking.startDate,\n        endDate: newBooking.endDate,\n        status: 'pending_confirmation', // BookedDateRange status is also 'pending_confirmation'\n    });\n    await newBookedDateRange.save();\n    console.log(`[API /bookings/initiate-payment POST] New BookedDateRange document created: ${newBookedDateRange._id.toString()} for booking ${newBooking._id.toString()} with 'pending_confirmation' status.`);\n\n    const stripeSession = await stripe.checkout.sessions.create({\n      payment_method_types: ['card'],\n      line_items: [\n        {\n          price_data: {\n            currency: 'usd',\n            product_data: {\n              name: `${property.title} (Booking: ${newBooking._id.toString()})`,\n              description: `Stay from ${format(normalizedStartDate, 'MMM dd, yyyy')} to ${format(normalizedEndDate, 'MMM dd, yyyy')}. Property ID: ${propertyId}`,\n              images: property.images && property.images.length > 0 ? [property.images[0]] : undefined,\n            },\n            unit_amount: Math.round(totalPrice * 100),\n          },\n          quantity: 1,\n        },\n      ],\n      mode: 'payment',\n      success_url: `${APP_URL}/booking/success?session_id={CHECKOUT_SESSION_ID}&booking_id=${newBooking._id.toString()}`,\n      cancel_url: `${APP_URL}/booking/cancel?booking_id=${newBooking._id.toString()}&property_id=${propertyId}`,\n      client_reference_id: newBooking._id.toString(),\n      metadata: {\n        bookingId: newBooking._id.toString(),\n        propertyId: propertyId,\n        guestId: guestId,\n      },\n      customer_email: guestEmail,\n    });\n\n    if (!stripeSession.id) {\n        console.warn(\"[API /bookings/initiate-payment POST] Stripe session creation failed. Deleting temporary booking and booked date range:\", newBooking._id.toString());\n        await Booking.findByIdAndDelete(newBooking._id);\n        await BookedDateRangeModel.findOneAndDelete({ bookingId: newBooking._id });\n        console.warn(`[API /bookings/initiate-payment POST] Cleaned up booking ${newBooking._id.toString()} and associated BookedDateRange due to Stripe failure.`);\n        return NextResponse.json({ message: 'Failed to initiate payment session with provider.' }, { status: 500 });\n    }\n    console.log(\"[API /bookings/initiate-payment POST] Stripe session created:\", stripeSession.id, \"for booking:\", newBooking._id.toString());\n\n    const formattedStartDateString = format(normalizedStartDate, 'MMMM dd, yyyy');\n    const formattedEndDateString = format(normalizedEndDate, 'MMMM dd, yyyy');\n\n    // Email to Guest: Informing them payment is pending, but booking request is now with host.\n    const guestEmailResult = await sendEmail({\n      to: guestEmail,\n      subject: `Your Booking Request for ${property.title} is Awaiting Host Confirmation`,\n      text: `Hi ${guestName},\\n\\nYour booking request for \"${property.title}\" from ${formattedStartDateString} to ${formattedEndDateString} for a total of $${totalPrice.toFixed(2)} is now awaiting host confirmation. Payment is still pending.\\n\\nYou should have been redirected to Stripe to finalize your payment. If not, please check your browser or contact support. Your booking is not fully confirmed until payment is successful AND the host accepts your request.\\n\\nBooking ID: ${newBooking._id.toString()}\\n\\nThank you,\\nThe Lodger Team`,\n      html: `<p>Hi ${guestName},</p><p>Your booking request for <strong>\"${property.title}\"</strong> from <strong>${formattedStartDateString}</strong> to <strong>${formattedEndDateString}</strong> for a total of <strong>$${totalPrice.toFixed(2)}</strong> is now awaiting host confirmation. Payment is still pending.</p><p>You should have been redirected to Stripe to finalize your payment. If not, please check your browser or contact support. Your booking is not fully confirmed until payment is successful AND the host accepts your request.</p><p>Booking ID: ${newBooking._id.toString()}</p><p>Thank you,<br/>The Lodger Team</p>`,\n    });\n    if (guestEmailResult.success) {\n      console.log(`[API /bookings/initiate-payment POST] Booking request (pending payment & host confirmation) email sent to guest ${guestEmail} for booking ${newBooking._id.toString()}`);\n    } else {\n      console.warn(`[API /bookings/initiate-payment POST] Failed to send booking request email to guest ${guestEmail} for booking ${newBooking._id.toString()}. Error: ${guestEmailResult.error}`);\n    }\n\n    // Email to Host: Informing them of a new booking request that is pending guest payment and their confirmation.\n    const hostUser = await UserModel.findById(property.hostId).lean() as IUser | null;\n    if (hostUser && hostUser.email) {\n      const hostEmailResult = await sendEmail({\n        to: hostUser.email,\n        subject: `New Booking Request for ${property.title} (Awaiting Guest Payment & Your Confirmation)`,\n        text: `Hi ${hostUser.name || 'Host'},\\n\\nA guest (${guestName}, ${guestEmail}) has requested to book your property \"${property.title}\" for the dates ${formattedStartDateString} to ${formattedEndDateString}.\\n\\nThe guest is currently being directed to complete payment. Once payment is successful, the booking will await your confirmation in your dashboard. Please review this request in your dashboard.\\n\\nBooking ID: ${newBooking._id.toString()}\\nProperty ID: ${property.id}\\n\\nRegards,\\nThe Lodger Team`,\n        html: `<p>Hi ${hostUser.name || 'Host'},</p><p>A guest (<strong>${guestName}</strong>, ${guestEmail}) has requested to book your property \"<strong>${property.title}</strong>\" for the dates <strong>${formattedStartDateString}</strong> to <strong>${formattedEndDateString}</strong>.</p><p>The guest is currently being directed to complete payment. Once payment is successful, the booking will await your confirmation in your dashboard. Please review this request in your dashboard.</p><p>Booking ID: ${newBooking._id.toString()}<br/>Property ID: ${property.id}</p><p>Regards,<br/>The Lodger Team</p>`,\n      });\n       if (hostEmailResult.success) {\n        console.log(`[API /bookings/initiate-payment POST] New booking request notification (pending payment & host confirmation) sent to host ${hostUser.email} for booking ${newBooking._id.toString()}`);\n      } else {\n        console.warn(`[API /bookings/initiate-payment POST] Failed to send new booking request notification to host ${hostUser.email} for booking ${newBooking._id.toString()}. Error: ${hostEmailResult.error}`);\n      }\n    } else {\n      console.warn(`[API /bookings/initiate-payment POST] Could not find host email for property ${property.id} to send new booking request notification. Host ID: ${property.hostId}`);\n    }\n\n    return NextResponse.json({ sessionId: stripeSession.id }, { status: 200 });\n\n  } catch (error: any) {\n    console.error('[API /bookings/initiate-payment POST] Error:', error);\n    let errorMessage = 'An unexpected error occurred.';\n    if (error.name === 'MongoNetworkError') {\n      errorMessage = 'Database connection error.';\n    } else if (error.message) {\n      errorMessage = error.message;\n    }\n    return NextResponse.json({ message: errorMessage, errorDetails: error.toString() }, { status: 500 });\n  }\n}\n\n    "],"names":[],"mappings":"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","debugId":null}}]
}