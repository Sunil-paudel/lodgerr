{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/cloudinary.ts"],"sourcesContent":["\nimport { v2 as cloudinaryV2, type ConfigOptions } from 'cloudinary';\n\nlet cloudinaryInstance: typeof cloudinaryV2 | null = null;\nlet cloudinaryConfigError: string | null = null;\n\nconst cloudName = process.env.CLOUDINARY_CLOUD_NAME;\nconst apiKey = process.env.CLOUDINARY_API_KEY;\nconst apiSecret = process.env.CLOUDINARY_API_SECRET;\n\nconst errors: string[] = [];\nif (!cloudName) {\n  errors.push('CLOUDINARY_CLOUD_NAME is not set.');\n}\nif (!apiKey) {\n  errors.push('CLOUDINARY_API_KEY is not set.');\n}\nif (!apiSecret) {\n  errors.push('CLOUDINARY_API_SECRET is not set.');\n}\n\nif (errors.length > 0) {\n  cloudinaryConfigError = `Cloudinary configuration error: ${errors.join(' ')} Image uploads will fail.`;\n  console.error(`[Cloudinary Lib] ${cloudinaryConfigError}`);\n} else {\n  try {\n    cloudinaryV2.config({\n      cloud_name: cloudName,\n      api_key: apiKey,\n      api_secret: apiSecret,\n      secure: true,\n    });\n    cloudinaryInstance = cloudinaryV2;\n    console.log('[Cloudinary Lib] Configured successfully.');\n  } catch (e: any) {\n    cloudinaryConfigError = `Failed to configure Cloudinary during init: ${e.message}`;\n    console.error(`[Cloudinary Lib] ${cloudinaryConfigError}`);\n  }\n}\n\nexport { cloudinaryInstance, cloudinaryConfigError };\n"],"names":[],"mappings":";;;;AACA;;AAEA,IAAI,qBAAiD;AACrD,IAAI,wBAAuC;AAE3C,MAAM,YAAY,QAAQ,GAAG,CAAC,qBAAqB;AACnD,MAAM,SAAS,QAAQ,GAAG,CAAC,kBAAkB;AAC7C,MAAM,YAAY,QAAQ,GAAG,CAAC,qBAAqB;AAEnD,MAAM,SAAmB,EAAE;AAC3B,IAAI,CAAC,WAAW;IACd,OAAO,IAAI,CAAC;AACd;AACA,IAAI,CAAC,QAAQ;IACX,OAAO,IAAI,CAAC;AACd;AACA,IAAI,CAAC,WAAW;IACd,OAAO,IAAI,CAAC;AACd;AAEA,IAAI,OAAO,MAAM,GAAG,GAAG;IACrB,wBAAwB,CAAC,gCAAgC,EAAE,OAAO,IAAI,CAAC,KAAK,yBAAyB,CAAC;IACtG,QAAQ,KAAK,CAAC,CAAC,iBAAiB,EAAE,uBAAuB;AAC3D,OAAO;IACL,IAAI;QACF,0IAAA,CAAA,KAAY,CAAC,MAAM,CAAC;YAClB,YAAY;YACZ,SAAS;YACT,YAAY;YACZ,QAAQ;QACV;QACA,qBAAqB,0IAAA,CAAA,KAAY;QACjC,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,GAAQ;QACf,wBAAwB,CAAC,4CAA4C,EAAE,EAAE,OAAO,EAAE;QAClF,QAAQ,KAAK,CAAC,CAAC,iBAAiB,EAAE,uBAAuB;IAC3D;AACF","debugId":null}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/upload/route.ts"],"sourcesContent":["\nimport { NextResponse, type NextRequest } from 'next/server';\nimport { cloudinaryInstance, cloudinaryConfigError } from '@/lib/cloudinary';\nimport { Readable } from 'stream';\n\n// Helper function to convert NextRequest stream to Node.js Readable stream\nasync function requestToStream(request: NextRequest) {\n  const reader = request.body?.getReader();\n  if (!reader) {\n    throw new Error('Failed to get reader from request body');\n  }\n\n  return new Readable({\n    async read() {\n      const { done, value } = await reader.read();\n      if (done) {\n        this.push(null); // Signal end of stream\n      } else {\n        this.push(value);\n      }\n    },\n  });\n}\n\n\nexport async function POST(request: NextRequest) {\n  if (cloudinaryConfigError) {\n    console.error('[API Upload] Cloudinary config error:', cloudinaryConfigError);\n    return NextResponse.json({ message: \"Image upload service is not configured correctly.\", error: cloudinaryConfigError }, { status: 503 });\n  }\n\n  if (!cloudinaryInstance) {\n    console.error('[API Upload] Cloudinary instance not available.');\n    return NextResponse.json({ message: \"Image upload service is unavailable.\", error: \"Cloudinary instance not initialized.\" }, { status: 503 });\n  }\n\n  try {\n    const formData = await request.formData();\n    const file = formData.get('file') as File | null;\n\n    if (!file) {\n      return NextResponse.json({ message: 'No file provided.' }, { status: 400 });\n    }\n\n    if (file.size === 0) {\n      return NextResponse.json({ message: 'Cannot upload an empty file.'}, { status: 400 });\n    }\n    \n    // Convert File to buffer\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n\n    // Use a Promise to handle the stream upload\n    const uploadResponse = await new Promise<{ secure_url?: string; public_id?: string; error?: any }>((resolve, reject) => {\n      const uploadStream = cloudinaryInstance!.uploader.upload_stream(\n        { resource_type: 'image' }, // You can add more options like folder, tags, etc.\n        (error, result) => {\n          if (error) {\n            console.error('[API Upload] Cloudinary upload error:', error);\n            return reject({ error });\n          }\n          if (!result) {\n            console.error('[API Upload] Cloudinary returned no result.');\n            return reject({ error: new Error('Cloudinary returned no result after upload.') });\n          }\n          return resolve({ secure_url: result.secure_url, public_id: result.public_id });\n        }\n      );\n      \n      // Create a new Readable stream from the buffer and pipe it\n      Readable.from(buffer).pipe(uploadStream);\n    });\n\n    if (uploadResponse.error || !uploadResponse.secure_url) {\n      const errorMessage = uploadResponse.error?.message || 'Unknown Cloudinary upload error.';\n      return NextResponse.json({ message: 'Failed to upload image.', error: errorMessage }, { status: 500 });\n    }\n    \n    console.log('[API Upload] File uploaded successfully to Cloudinary:', uploadResponse.secure_url);\n    return NextResponse.json({ \n      message: 'File uploaded successfully', \n      imageUrl: uploadResponse.secure_url,\n      publicId: uploadResponse.public_id \n    }, { status: 200 });\n\n  } catch (error: any) {\n    console.error('[API Upload] Error processing upload request:', error);\n    let errorMessage = 'An unexpected error occurred during file upload.';\n     if (error.message) {\n        errorMessage = error.message;\n    }\n    // Check for specific error types if needed, e.g., body parsing errors\n    if (error.type === 'entity.too.large') { // Example, check actual error types from Next.js/Node\n        errorMessage = 'File size exceeds server limit.';\n        return NextResponse.json({ message: errorMessage, error: 'FileTooLarge' }, { status: 413 }); // Payload Too Large\n    }\n    return NextResponse.json({ message: 'Upload failed due to a server error.', error: errorMessage }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}