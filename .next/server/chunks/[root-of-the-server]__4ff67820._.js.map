{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/models/User.ts"],"sourcesContent":["\nimport mongoose, { Schema, Document } from \"mongoose\";\n\n// Define the user interface extending Mongoose's Document\nexport interface IUser extends Document {\n  name: string;\n  email: string;\n  passwordHash?: string;\n  role: \"guest\" | \"host\" | \"admin\";\n  stripeAccountId?: string;\n  avatarUrl?: string;\n  createdAt: Date;\n}\n\n// Define the user schema\nconst userSchema = new Schema<IUser>(\n  {\n    name: { type: String, required: true }, // Removed unique: true\n    email: { type: String, required: true, unique: true },\n    passwordHash: { type: String },\n    role: { type: String, enum: [\"guest\", \"host\", \"admin\"], default: \"guest\" },\n    stripeAccountId: { type: String },\n    avatarUrl: { type: String },\n  },\n  { timestamps: true }\n);\n\n// Use mongoose.model and mongoose.models to avoid model overwrite issues\nexport default mongoose.models.User || mongoose.model<IUser>(\"User\", userSchema);\n\n"],"names":[],"mappings":";;;AACA;;AAaA,yBAAyB;AACzB,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAC3B;IACE,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,cAAc;QAAE,MAAM;IAAO;IAC7B,MAAM;QAAE,MAAM;QAAQ,MAAM;YAAC;YAAS;YAAQ;SAAQ;QAAE,SAAS;IAAQ;IACzE,iBAAiB;QAAE,MAAM;IAAO;IAChC,WAAW;QAAE,MAAM;IAAO;AAC5B,GACA;IAAE,YAAY;AAAK;uCAIN,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAQ,QAAQ","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/utils/db.ts"],"sourcesContent":["import mongoose from \"mongoose\";\nmongoose.set('strictQuery', false);\n\n// Ensure this MONGODB_URL is correct and your IP is whitelisted if using Atlas.\nconst MONGODB_URL= \"mongodb+srv://paudelsunil16:paudelsunil16@cluster0.dlua3bq.mongodb.net/\";\n\nconst connectDB = async () => {\n  if (mongoose.connection.readyState >= 1) {\n    console.log(\"MongoDB is already connected.\");\n    return;\n  }\n  try {\n    if (!MONGODB_URL) {\n      console.error(\"[DB Connect] MongoDB URI is not defined. Please set it in your environment variables or configuration.\");\n      throw new Error(\"Server configuration error: MONGODB_URI is not defined.\");\n    }\n    console.log(\"[DB Connect] Attempting to connect to MongoDB...\");\n    await mongoose.connect(MONGODB_URL);\n    console.log(\"[DB Connect] MongoDB connected successfully.\");\n  } catch (error: any) {\n    console.error(\"[DB Connect] MongoDB connection failed:\", error.message);\n    if (error.stack) {\n      console.error(\"[DB Connect] MongoDB connection error stack:\", error.stack);\n    } else {\n      console.error(\"[DB Connect] MongoDB connection error details:\", error);\n    }\n    // Construct a new error to ensure it's an Error instance with a clear message\n    throw new Error(\"Database connection failed: \" + error.message);\n  }\n};\n\nexport default connectDB;"],"names":[],"mappings":";;;AAAA;;AACA,yGAAA,CAAA,UAAQ,CAAC,GAAG,CAAC,eAAe;AAE5B,gFAAgF;AAChF,MAAM,cAAa;AAEnB,MAAM,YAAY;IAChB,IAAI,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,UAAU,IAAI,GAAG;QACvC,QAAQ,GAAG,CAAC;QACZ;IACF;IACA,IAAI;QACF,uCAAkB;;QAGlB;QACA,QAAQ,GAAG,CAAC;QACZ,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QACvB,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,2CAA2C,MAAM,OAAO;QACtE,IAAI,MAAM,KAAK,EAAE;YACf,QAAQ,KAAK,CAAC,gDAAgD,MAAM,KAAK;QAC3E,OAAO;YACL,QAAQ,KAAK,CAAC,kDAAkD;QAClE;QACA,8EAA8E;QAC9E,MAAM,IAAI,MAAM,iCAAiC,MAAM,OAAO;IAChE;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/auth/signup/route.ts"],"sourcesContent":["\nimport User from \"@/models/User\";\nimport connectDB from \"@/utils/db\";\nimport bcrypt from \"bcryptjs\";\nimport { NextResponse, type NextRequest } from \"next/server\";\n\nexport const POST = async (request: NextRequest) => {\n  try {\n    const { fullName, email, password } = await request.json();\n    console.log(\"[Signup API] Received request with data:\", { fullName, email, password_exists: !!password });\n\n    if (!fullName || !email || !password) {\n      console.log(\"[Signup API] Missing required fields.\");\n      return NextResponse.json(\n        { message: \"Missing required fields: fullName, email, and password.\" },\n        { status: 400 }\n      );\n    }\n\n    console.log(\"[Signup API] Connecting to DB...\");\n    await connectDB();\n    console.log(\"[Signup API] DB connected.\");\n\n    // Explicitly log the email being searched for\n    console.log(\"[Signup API] Checking for existing user with email:\", email);\n    const existingUser = await User.findOne({ email: email }); // Search by email\n\n    if (existingUser) {\n      // This block should ONLY be hit if the email already exists\n      console.log(\"[Signup API] Found existing user with this email:\", existingUser.toObject());\n      return NextResponse.json(\n        { message: \"This email address is already registered. Please use a different email or log in.\" },\n        { status: 409 } // Conflict - for duplicate email\n      );\n    }\n    console.log(\"[Signup API] No existing user found with email:\", email);\n\n    const hashedPassword = await bcrypt.hash(password, 10);\n    console.log(\"[Signup API] Password hashed successfully for email:\", email);\n\n    const newUser = new User({\n      name: fullName,\n      email,\n      passwordHash: hashedPassword,\n      // role defaults to 'guest' as per schema in User model\n      // Mongoose will automatically generate a unique '_id'\n      // No 'id' field is set here.\n    });\n\n    // Log the object just before saving to ensure no unexpected 'id' field is present\n    const userObjectToSave = newUser.toObject();\n    if ('id' in userObjectToSave) {\n        console.warn(\"[Signup API] Warning: 'id' field present on newUser object before save. This is unexpected as Mongoose uses '_id'. Object:\", userObjectToSave);\n    } else {\n        console.log(\"[Signup API] New user object structure is as expected (no 'id' field, relies on '_id').\");\n    }\n    console.log(\"[Signup API] Attempting to save new user object:\", userObjectToSave);\n    \n    await newUser.save();\n    console.log(\"[Signup API] User saved successfully:\", { _id: newUser._id, email: newUser.email });\n\n    return NextResponse.json(\n      { message: \"User created successfully. You can now log in.\" },\n      { status: 201 }\n    );\n  } catch (err: any) {\n    console.error(\"[Signup API] Error during signup process:\", err);\n\n    // Check for MongoDB duplicate key error (code 11000)\n    if (err.code === 11000) {\n      let DMessage = \"A user with some of these details already exists. Please check your input.\";\n      console.log(\"[Signup API] MongoDB duplicate key error (E11000). Key pattern:\", err.keyPattern);\n      if (err.keyPattern) {\n          const conflictingFields = Object.keys(err.keyPattern).join(', ');\n          if (err.keyPattern.email) { // Specifically check if 'email' is the conflicting field\n            DMessage = `This email address is already registered. Please use a different email or log in.`;\n          } else if (err.keyPattern.id) { // Specifically check if 'id' is the conflicting field\n             DMessage = `An account already exists with this ID. This is unexpected, please contact support or check database configuration.`;\n             console.error(\"[Signup API] Critical: Duplicate key error on 'id' field. This suggests a custom unique index on 'id' in the MongoDB collection which should be removed. Mongoose uses '_id'.\");\n          }\n           else {\n            DMessage = `An account already exists with this ${conflictingFields}. Please use different details.`;\n          }\n          console.log(\"[Signup API] Conflicting fields from keyPattern:\", conflictingFields);\n      }\n      return NextResponse.json(\n          { message: DMessage, errorDetails: `MongoDB E11000: Duplicate key on field(s): ${JSON.stringify(err.keyPattern)}` },\n          { status: 409 } // Conflict\n      );\n    }\n    \n    // General server error\n    let errorDetails = \"Unknown server error.\";\n    if (err.name && err.message) {\n      errorDetails = `${err.name}: ${err.message}`;\n    } else if (err.message) {\n      errorDetails = err.message;\n    } else if (err.code) {\n        errorDetails = `Error Code ${err.code}`;\n    }\n\n    return NextResponse.json(\n      { \n        message: \"An internal server error occurred during signup. Please try again later.\", \n        errorDetails: errorDetails \n      },\n      { status: 500 }\n    );\n  }\n};\n"],"names":[],"mappings":"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","debugId":null}}]
}