{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/models/User.ts"],"sourcesContent":["import mongoose, { Schema, Document, models, model } from \"mongoose\";\n\n\nexport interface IUser extends Document {\n \n  name: string;\n  email: string;\n  passwordHash?: string;\n  role: \"guest\" | \"host\" | \"admin\";\n  stripeAccountId?: string;\n  avatarUrl?: string;\n  createdAt: Date;\n}\n\nconst userSchema = new Schema<IUser>(\n  {\n    id: { type: Number, unique: true }, \n    name: { type: String, required: true, unique: true },\n    email: { type: String, required: true, unique: true },\n    passwordHash: { type: String },\n    role: { type: String, enum: [\"guest\", \"host\", \"admin\"], default: \"guest\" },\n    stripeAccountId: { type: String },\n    avatarUrl: { type: String },\n  },\n  { timestamps: true }\n);\n\n\n\nexport default models.User || model<IUser>(\"User\", userSchema);\n"],"names":[],"mappings":";;;AAAA;;AAcA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAC3B;IACE,IAAI;QAAE,MAAM;QAAQ,QAAQ;IAAK;IACjC,MAAM;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACnD,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,cAAc;QAAE,MAAM;IAAO;IAC7B,MAAM;QAAE,MAAM;QAAQ,MAAM;YAAC;YAAS;YAAQ;SAAQ;QAAE,SAAS;IAAQ;IACzE,iBAAiB;QAAE,MAAM;IAAO;IAChC,WAAW;QAAE,MAAM;IAAO;AAC5B,GACA;IAAE,YAAY;AAAK;uCAKN,yGAAA,CAAA,SAAM,CAAC,IAAI,IAAI,CAAA,GAAA,yGAAA,CAAA,QAAK,AAAD,EAAS,QAAQ","debugId":null}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["// /app/api/auth/[...nextauth]/route.ts\n\nimport NextAuth from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport bcrypt from \"bcryptjs\";\nimport User from \"@/models/User\";\nimport mongoose from \"mongoose\";\n\nconst handler = NextAuth({\n  providers: [\n    CredentialsProvider({\n      name: \"Credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"text\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        await mongoose.connect(process.env.MONGODB_URI!);\n\n        const user = await User.findOne({ email: credentials?.email });\n        if (!user) throw new Error(\"No user found\");\n\n        const isValid = await bcrypt.compare(credentials!.password, user.passwordHash || \"\");\n        if (!isValid) throw new Error(\"Invalid password\");\n\n        return {\n          id: user._id.toString(),\n          name: user.name,\n          email: user.email,\n          role: user.role,\n        };\n      },\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n  },\n  pages: {\n    signIn: \"/login\", // optional custom page\n  },\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n       \n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token && session.user) {\n        session.user.id = token.id;\n      \n      }\n      return session;\n    },\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n});\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":"AAAA,uCAAuC;;;;;AAEvC;AACA;AACA;AACA;AACA;;;;;;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE;IACvB,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAO;gBACtC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW;gBAE9C,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;oBAAE,OAAO,aAAa;gBAAM;gBAC5D,IAAI,CAAC,MAAM,MAAM,IAAI,MAAM;gBAE3B,MAAM,UAAU,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,YAAa,QAAQ,EAAE,KAAK,YAAY,IAAI;gBACjF,IAAI,CAAC,SAAS,MAAM,IAAI,MAAM;gBAE9B,OAAO;oBACL,IAAI,KAAK,GAAG,CAAC,QAAQ;oBACrB,MAAM,KAAK,IAAI;oBACf,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;gBACjB;YACF;QACF;KACD;IACD,SAAS;QACP,UAAU;IACZ;IACA,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YAEpB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,SAAS,QAAQ,IAAI,EAAE;gBACzB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAE5B;YACA,OAAO;QACT;IACF;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;AACrC","debugId":null}}]
}