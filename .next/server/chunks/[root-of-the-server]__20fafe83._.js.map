{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/utils/db.ts"],"sourcesContent":["import mongoose from \"mongoose\";\nmongoose.set('strictQuery', false);\n\n// Ensure this MONGODB_URL is correct and your IP is whitelisted if using Atlas.\nconst MONGODB_URL= \"mongodb+srv://paudelsunil16:paudelsunil16@cluster0.dlua3bq.mongodb.net/\";\n\nconst connectDB = async () => {\n  if (mongoose.connection.readyState >= 1) {\n    console.log(\"MongoDB is already connected.\");\n    return;\n  }\n  try {\n    if (!MONGODB_URL) {\n      console.error(\"[DB Connect] MongoDB URI is not defined. Please set it in your environment variables or configuration.\");\n      throw new Error(\"Server configuration error: MONGODB_URI is not defined.\");\n    }\n    console.log(\"[DB Connect] Attempting to connect to MongoDB...\");\n    await mongoose.connect(MONGODB_URL);\n    console.log(\"[DB Connect] MongoDB connected successfully.\");\n  } catch (error: any) {\n    console.error(\"[DB Connect] MongoDB connection failed:\", error.message);\n    if (error.stack) {\n      console.error(\"[DB Connect] MongoDB connection error stack:\", error.stack);\n    } else {\n      console.error(\"[DB Connect] MongoDB connection error details:\", error);\n    }\n    // Construct a new error to ensure it's an Error instance with a clear message\n    throw new Error(\"Database connection failed: \" + error.message);\n  }\n};\n\nexport default connectDB;"],"names":[],"mappings":";;;AAAA;;AACA,yGAAA,CAAA,UAAQ,CAAC,GAAG,CAAC,eAAe;AAE5B,gFAAgF;AAChF,MAAM,cAAa;AAEnB,MAAM,YAAY;IAChB,IAAI,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,UAAU,IAAI,GAAG;QACvC,QAAQ,GAAG,CAAC;QACZ;IACF;IACA,IAAI;QACF,uCAAkB;;QAGlB;QACA,QAAQ,GAAG,CAAC;QACZ,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QACvB,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,2CAA2C,MAAM,OAAO;QACtE,IAAI,MAAM,KAAK,EAAE;YACf,QAAQ,KAAK,CAAC,gDAAgD,MAAM,KAAK;QAC3E,OAAO;YACL,QAAQ,KAAK,CAAC,kDAAkD;QAClE;QACA,8EAA8E;QAC9E,MAAM,IAAI,MAAM,iCAAiC,MAAM,OAAO;IAChE;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/models/BookedDateRange.ts"],"sourcesContent":["\nimport mongoose, { Schema, Document } from 'mongoose';\nimport type { BookingStatus } from '@/lib/types';\n\n// Interface for the Mongoose Document\nexport interface BookedDateRangeDocument extends Document {\n  _id: mongoose.Types.ObjectId;\n  propertyId: mongoose.Types.ObjectId;\n  bookingId: mongoose.Types.ObjectId;\n  startDate: Date;\n  endDate: Date;\n  status: BookingStatus;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst bookedDateRangeSchema = new Schema<BookedDateRangeDocument>(\n  {\n    propertyId: {\n      type: Schema.Types.ObjectId,\n      ref: 'Property',\n      required: true,\n      index: true,\n    },\n    bookingId: {\n      type: Schema.Types.ObjectId,\n      ref: 'Booking',\n      required: true,\n      unique: true, \n      index: true,\n    },\n    startDate: {\n      type: Date,\n      required: true,\n    },\n    endDate: {\n      type: Date,\n      required: true,\n    },\n    status: {\n      type: String,\n      enum: [\n        'pending_confirmation',\n        'pending_payment',\n        'confirmed_by_host',\n        'rejected_by_host',\n        'cancelled_by_guest',\n        'cancelled_by_admin', // Added new status\n        'completed',\n        'no_show',\n      ] as BookingStatus[],\n      required: true,\n      index: true,\n    },\n  },\n  { timestamps: true }\n);\n\n// Compound index to quickly find overlapping ranges for a property\nbookedDateRangeSchema.index({ propertyId: 1, startDate: 1, endDate: 1 });\nbookedDateRangeSchema.index({ propertyId: 1, status: 1 });\n\n\nexport default mongoose.models.BookedDateRange || mongoose.model<BookedDateRangeDocument>(\"BookedDateRange\", bookedDateRangeSchema);\n"],"names":[],"mappings":";;;AACA;;AAeA,MAAM,wBAAwB,IAAI,yGAAA,CAAA,SAAM,CACtC;IACE,YAAY;QACV,MAAM,yGAAA,CAAA,SAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,KAAK;QACL,UAAU;QACV,OAAO;IACT;IACA,WAAW;QACT,MAAM,yGAAA,CAAA,SAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,KAAK;QACL,UAAU;QACV,QAAQ;QACR,OAAO;IACT;IACA,WAAW;QACT,MAAM;QACN,UAAU;IACZ;IACA,SAAS;QACP,MAAM;QACN,UAAU;IACZ;IACA,QAAQ;QACN,MAAM;QACN,MAAM;YACJ;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;QACD,UAAU;QACV,OAAO;IACT;AACF,GACA;IAAE,YAAY;AAAK;AAGrB,mEAAmE;AACnE,sBAAsB,KAAK,CAAC;IAAE,YAAY;IAAG,WAAW;IAAG,SAAS;AAAE;AACtE,sBAAsB,KAAK,CAAC;IAAE,YAAY;IAAG,QAAQ;AAAE;uCAGxC,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,eAAe,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAA0B,mBAAmB","debugId":null}},
    {"offset": {"line": 168, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/properties/%5Bid%5D/booked-ranges/route.ts"],"sourcesContent":["\n'use server';\n\nimport { NextResponse, type NextRequest } from 'next/server';\nimport mongoose from 'mongoose';\nimport connectDB from '@/utils/db';\nimport BookedDateRangeModel, { type BookedDateRangeDocument } from '@/models/BookedDateRange';\nimport type { BookedDateRange as BookedDateRangeType, BookingStatus } from '@/lib/types';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { id: string } } \n) {\n  const { id } = params; \n\n  if (!id || !mongoose.Types.ObjectId.isValid(id)) {\n    return NextResponse.json({ message: 'Invalid property ID format.' }, { status: 400 });\n  }\n\n  try {\n    await connectDB();\n    console.log(`[API /properties/${id}/booked-ranges GET] Attempting to fetch booked ranges for property ID: ${id}`);\n\n    // Statuses that make a date range effectively \"unavailable\" for new bookings\n    const relevantStatuses: BookingStatus[] = ['pending_payment', 'pending_confirmation', 'confirmed_by_host'];\n\n    const bookedRangesDocs = await BookedDateRangeModel.find({\n      propertyId: new mongoose.Types.ObjectId(id), \n      status: { $in: relevantStatuses }\n    }).lean();\n\n    console.log(`[API /properties/${id}/booked-ranges GET] Found ${bookedRangesDocs.length} relevant booked range documents for property ${id}.`);\n\n    const bookedRanges: BookedDateRangeType[] = bookedRangesDocs.map(doc => {\n      const range = doc as unknown as BookedDateRangeDocument; // Cast to include Mongoose specific fields like _id\n      return {\n        id: range._id.toString(),\n        propertyId: range.propertyId.toString(),\n        bookingId: range.bookingId.toString(),\n        startDate: range.startDate,\n        endDate: range.endDate,\n        status: range.status,\n        createdAt: range.createdAt,\n        updatedAt: range.updatedAt,\n      };\n    });\n    \n    const loggedRanges = JSON.stringify(bookedRanges, null, 2);\n    console.log(`[API /properties/${id}/booked-ranges GET] Transformed booked ranges (first 500 chars): ${loggedRanges.substring(0, 500)}${loggedRanges.length > 500 ? '...' : ''}`);\n\n    return NextResponse.json(bookedRanges, { status: 200 });\n\n  } catch (error: any) {\n    console.error(`[API /properties/${id}/booked-ranges GET] Critical error fetching booked ranges for property ${id}:`, error.message, error.stack);\n    let errorMessage = 'Server error while fetching booked ranges.';\n    if (error.name === 'MongoNetworkError') {\n      errorMessage = 'Database connection error during booked ranges fetch.';\n    } else if (error.message) {\n      errorMessage = error.message;\n    }\n    return NextResponse.json({ message: errorMessage, errorDetails: error.toString(), errorName: error.name }, { status: 500 });\n  }\n}\n\n    \n"],"names":[],"mappings":";;;;;AAGA;AACA;AACA;AACA;;;;;;;;AAGO,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAA8B;IAEtC,MAAM,EAAE,EAAE,EAAE,GAAG;IAEf,IAAI,CAAC,MAAM,CAAC,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK;QAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA8B,GAAG;YAAE,QAAQ;QAAI;IACrF;IAEA,IAAI;QACF,MAAM,CAAA,GAAA,oHAAA,CAAA,UAAS,AAAD;QACd,QAAQ,GAAG,CAAC,CAAC,iBAAiB,EAAE,GAAG,uEAAuE,EAAE,IAAI;QAEhH,6EAA6E;QAC7E,MAAM,mBAAoC;YAAC;YAAmB;YAAwB;SAAoB;QAE1G,MAAM,mBAAmB,MAAM,kIAAA,CAAA,UAAoB,CAAC,IAAI,CAAC;YACvD,YAAY,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC;YACxC,QAAQ;gBAAE,KAAK;YAAiB;QAClC,GAAG,IAAI;QAEP,QAAQ,GAAG,CAAC,CAAC,iBAAiB,EAAE,GAAG,0BAA0B,EAAE,iBAAiB,MAAM,CAAC,8CAA8C,EAAE,GAAG,CAAC,CAAC;QAE5I,MAAM,eAAsC,iBAAiB,GAAG,CAAC,CAAA;YAC/D,MAAM,QAAQ,KAA2C,oDAAoD;YAC7G,OAAO;gBACL,IAAI,MAAM,GAAG,CAAC,QAAQ;gBACtB,YAAY,MAAM,UAAU,CAAC,QAAQ;gBACrC,WAAW,MAAM,SAAS,CAAC,QAAQ;gBACnC,WAAW,MAAM,SAAS;gBAC1B,SAAS,MAAM,OAAO;gBACtB,QAAQ,MAAM,MAAM;gBACpB,WAAW,MAAM,SAAS;gBAC1B,WAAW,MAAM,SAAS;YAC5B;QACF;QAEA,MAAM,eAAe,KAAK,SAAS,CAAC,cAAc,MAAM;QACxD,QAAQ,GAAG,CAAC,CAAC,iBAAiB,EAAE,GAAG,iEAAiE,EAAE,aAAa,SAAS,CAAC,GAAG,OAAO,aAAa,MAAM,GAAG,MAAM,QAAQ,IAAI;QAE/K,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,cAAc;YAAE,QAAQ;QAAI;IAEvD,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,CAAC,iBAAiB,EAAE,GAAG,uEAAuE,EAAE,GAAG,CAAC,CAAC,EAAE,MAAM,OAAO,EAAE,MAAM,KAAK;QAC/I,IAAI,eAAe;QACnB,IAAI,MAAM,IAAI,KAAK,qBAAqB;YACtC,eAAe;QACjB,OAAO,IAAI,MAAM,OAAO,EAAE;YACxB,eAAe,MAAM,OAAO;QAC9B;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAc,cAAc,MAAM,QAAQ;YAAI,WAAW,MAAM,IAAI;QAAC,GAAG;YAAE,QAAQ;QAAI;IAC3H;AACF;;;IArDsB;;AAAA,iPAAA","debugId":null}}]
}